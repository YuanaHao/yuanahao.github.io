"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[4522],{8789:(i,s)=>{s.A=(i,s)=>{const t=i.__vccOpts||i;for(const[i,a]of s)t[i]=a;return t}},4489:(i,s,t)=>{t.r(s),t.d(s,{comp:()=>n,data:()=>l});var a=t(5252);const e={},n=(0,t(8789).A)(e,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h2 id="pa1-automatic-differentiation" tabindex="-1"><a class="header-anchor" href="#pa1-automatic-differentiation"><span>PA1: Automatic differentiation</span></a></h2><h3 id="question-1-auto-diff-library" tabindex="-1"><a class="header-anchor" href="#question-1-auto-diff-library"><span>Question 1: Auto Diff Library</span></a></h3><h4 id="part-1-operators" tabindex="-1"><a class="header-anchor" href="#part-1-operators"><span>Part 1: Operators</span></a></h4><p>The list of operators that you will need to implement are:</p><ul><li><code>DivOp</code></li><li><code>DivByConstOp</code></li><li><code>TransposeOp</code></li><li><code>ReLUOp</code></li><li><code>SqrtOp</code></li><li><code>PowerOp</code></li><li><code>MeanOp</code></li><li><code>MatMulOp</code></li><li><code>SoftmaxOp</code></li><li><code>LayerNormOp</code></li></ul><h5 id="divop" tabindex="-1"><a class="header-anchor" href="#divop"><span>DivOp</span></a></h5><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DivOp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Op</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;&quot;&quot;Op to element-wise divide two nodes.&quot;&quot;&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> __call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">node_A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Node, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">node_B</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Node) -&gt; Node:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[node_A, node_B],</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            op</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">node_A.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">node_B.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        )</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Node, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">input_values</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: List[torch.Tensor]) -&gt; torch.Tensor:</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &quot;&quot;&quot;Return the element-wise division of input values.&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(input_values) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &quot;&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">TODO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">: your code here&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Node, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">output_grad</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: Node) -&gt; List[Node]:</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &quot;&quot;&quot;Given gradient of division node, return partial adjoint to each input.&quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &quot;&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">TODO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">: your code here&quot;&quot;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7)]))}]]),l=JSON.parse('{"path":"/posts/CSE234_PA.html","title":"CSE234","lang":"zh-CN","frontmatter":{"title":"CSE234","date":"2025-02-27T00:00:00.000Z","category":["CSE234","Lab"],"tag":["公开课","MLSys","course","Lab"],"sticky":true,"star":true,"order":-2.1,"description":"PA1: Automatic differentiation Question 1: Auto Diff Library Part 1: Operators The list of operators that you will need to implement are: DivOp DivByConstOp TransposeOp ReLUOp S...","head":[["meta",{"property":"og:url","content":"https://newzone.top/posts/CSE234_PA.html"}],["meta",{"property":"og:site_name","content":"CS_Blog"}],["meta",{"property":"og:title","content":"CSE234"}],["meta",{"property":"og:description","content":"PA1: Automatic differentiation Question 1: Auto Diff Library Part 1: Operators The list of operators that you will need to implement are: DivOp DivByConstOp TransposeOp ReLUOp S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-23T04:22:38.000Z"}],["meta",{"property":"article:tag","content":"公开课"}],["meta",{"property":"article:tag","content":"MLSys"}],["meta",{"property":"article:tag","content":"course"}],["meta",{"property":"article:tag","content":"Lab"}],["meta",{"property":"article:published_time","content":"2025-02-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-23T04:22:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSE234\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-23T04:22:38.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"PA1: Automatic differentiation","slug":"pa1-automatic-differentiation","link":"#pa1-automatic-differentiation","children":[{"level":3,"title":"Question 1: Auto Diff Library","slug":"question-1-auto-diff-library","link":"#question-1-auto-diff-library","children":[]}]}],"git":{"createdTime":1750652558000,"updatedTime":1750652558000,"contributors":[{"name":"youth00000000","email":"youthandqueen@qq.com","commits":1}]},"readingTime":{"minutes":0.94,"words":283},"filePathRelative":"_posts/CSE234_PA.md","localizedDate":"2025年2月27日","excerpt":"<h2>PA1: Automatic differentiation</h2>\\n<h3>Question 1: Auto Diff Library</h3>\\n<h4>Part 1: Operators</h4>\\n<p>The list of operators that you will need to implement are:</p>\\n<ul>\\n<li><code>DivOp</code></li>\\n<li><code>DivByConstOp</code></li>\\n<li><code>TransposeOp</code></li>\\n<li><code>ReLUOp</code></li>\\n<li><code>SqrtOp</code></li>\\n<li><code>PowerOp</code></li>\\n<li><code>MeanOp</code></li>\\n<li><code>MatMulOp</code></li>\\n<li><code>SoftmaxOp</code></li>\\n<li><code>LayerNormOp</code></li>\\n</ul>","autoDesc":true}')}}]);