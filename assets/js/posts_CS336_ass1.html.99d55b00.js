"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5947],{8789:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},4071:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>l});var n=a(5252);const t={},e=(0,a(8789).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h2 id="assignment-overview" tabindex="-1"><a class="header-anchor" href="#assignment-overview"><span>Assignment Overview</span></a></h2><blockquote><p>course web:https://stanford-cs336.github.io/spring2025/</p></blockquote><p><strong>这个homework有一定的算力要求<s>毕竟要训练model</s></strong></p><p>  CS336: Language Modeling from Scratch，是Stanford开的一门课，目的是带领学生<code>从头</code>构建llm，通过尽量少调用现有库的方式<code>手搓</code>llm。<br>   事实上由于我的大部分知识学习与工作都是通过<code>即用即学</code>的方式完成的，这种系统的学习确实是我所缺乏的，我将通过五个homework尽量补全llm所缺乏的知识，并希望以此提升我的code skill，方便开发新的work。<br>   CS336的第一个homework被叫做basic，但是我看到这个homework的overview就觉得不是很basic，事实上这个homework涉及到的theory确实是basic的，但是完成的方式和basic还是有一定区别。<br>   这个homework要完成以下几件事：</p><ul><li>实现一个BPE分词器</li><li>实现transformer的各个组件</li><li>实现loss function、optimizer（经典的Adam）、scheduler和整个train过程</li><li>使用不同数据集、调整超参和消融实验</li></ul><p>  以上这些任务都强调不使用封装好的torch库<s>真是充满手搓的暴力美学</s>，一看就不是很basic...</p><h3 id="byte-pair-encoding-bpe-tokenizer" tabindex="-1"><a class="header-anchor" href="#byte-pair-encoding-bpe-tokenizer"><span>Byte-Pair Encoding (BPE) Tokenizer</span></a></h3><p>  这部分就是经典的tokenizer的实现了，就是要实现<code>字符 -&gt; 字节 -&gt; 整数序列</code>的转换，事实上就是要实现从自然语言到机器语言的转换，具体可以参考这两篇经典文章：</p><blockquote><p>[Neural Machine Translation of Rare Words with Subword Units] https://arxiv.org/abs/1508.07909<br> [Neural Machine Translation with Byte-Level Subwords]https://arxiv.org/abs/1909.03341</p></blockquote><h4 id="the-unicode-standard" tabindex="-1"><a class="header-anchor" href="#the-unicode-standard"><span>The Unicode Standard</span></a></h4><p>  <code>Unicode</code>标准是规定字符-&gt;整数的一种标准。<br>   在Python中，可以使用<code>ord()</code>函数将单个Unicode字符转换为其整数表示形式。<code>chr()</code>函数将整数Unicode代码点转换为具有相应字符的字符串。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Unicode example</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> ord</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;牛&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">29275</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">29275</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;牛&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Answer Problem (unicode1):</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># A: What Unicode character does chr(0) return?</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Q: &#39;\\x00&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># A: How does this character’s string representation (__repr__()) differ from its printed representa-tion?</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Q: It&#39;s a invisible string, so no output.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># A: What happens when this character occurs in text? </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># It may be helpful to play around with the following in your Python interpreter and see if it matches your expectations:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># &gt;&gt;&gt; chr(0)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># &gt;&gt;&gt; print(chr(0))</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># &gt;&gt;&gt; &quot;this is a test&quot; + chr(0) + &quot;string&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># &gt;&gt;&gt; print(&quot;this is a test&quot; + chr(0) + &quot;string&quot;)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Q:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;this is a test&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;string&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;this is a test</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\x00</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">string&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;this is a test&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">this </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> a teststring</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unicode-encodings" tabindex="-1"><a class="header-anchor" href="#unicode-encodings"><span>Unicode Encodings</span></a></h4><p>  Unicode<code>似乎已经</code>可以成功帮我们把string转成interger了，<code>似乎已经</code>可以帮我们转成可训练的机器语言了。<br>   但是Unicode的dictionary本身有两个缺陷：</p><ul><li>dictionary本身很大（150K）</li><li>dictionary会很稀疏（经常使用的词汇命中率会很高）</li></ul><p>  我们将使用Unicode编码，它将Unicode字符转换为字节序列。<br>   Unicode标准本身定义了三种编码：UTF-8、UTF-16和UTF-32，UTF-8是Internet的主要编码。</p><blockquote><p><code>UTF-8</code>: 变长字符编码，被定义为将码点编码为 1 至 4 个字节，具体取决于码点数值中有效二进制位的数量 <code>UTF-16</code>: 变长字符编码, 这种编码方式比较特殊, 它将字符编码成 2 字节 或者 4 字节 <code>UTF-32</code>: 固定长度的编码，始终占用 4 个字节，足以容纳所有的 Unicode 字符，所以直接存储 Unicode 码即可，不需要任何编码转换</p></blockquote><p>  Unicode字符串编码与反编码，可以通过Python自带的原语实现：</p><ul><li>encode(): Unicode字符串编码为UTF-8</li><li>decode(): UTF-8字节字符串解码为Unicode字符串</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> test_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello! こんにちは!&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> utf8_encoded </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> test_string.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(utf8_encoded)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;hello! </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\xe3\\x81\\x93\\xe3\\x82\\x93\\xe3\\x81\\xab\\xe3\\x81\\xa1\\xe3\\x81\\xaf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">!&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(utf8_encoded))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;bytes&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(utf8_encoded)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">104</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">108</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">108</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">33</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">227</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">129</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">147</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">227</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">147</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">227</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">129</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">171</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">227</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">129</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">161</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">227</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">129</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">175</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">33</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(test_string))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">13</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(utf8_encoded))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">23</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(utf8_encoded.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">hello! こんにちは!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  通过将我们的Unicode代码点转换为字节序列，我们实际上是在获取代码点序列（0到154,997范围内的整数）并将其转换为字节值序列（0到255范围内的整数）。</p><p>Answer Problem (unicode2):</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Q: What are some reasons to prefer training our tokenizer on UTF-8 encoded bytes, rather than UTF-16 or UTF-32? </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># It may be helpful to compare the output of these encodings for various input strings.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># A: UTF-8 is a dynamic length code, so it just need a byte for ASCII, making it efficient for English.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Q: Consider the following (incorrect) function, which is intended to decode a UTF-8 byte string into a Unicode string. </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Why is this function incorrect? Provide an example of an input byte string that yields incorrect results.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> decode_utf8_bytes_to_str_wrong</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">bytestring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([b]).</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bytestring])</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;"> decode_utf8_bytes_to_str_wrong</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;hello&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># A: The functino just support to encode utf-8 byte by byte, but it will go wrong when we decode muti-byte string such as &quot;你好&quot;. </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># Q: Give a two byte sequence that does not decode to any Unicode character(s).</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># A: b&#39;\\xc3\\x41&#39; is a illegal two byte sequence.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="subword-tokenization" tabindex="-1"><a class="header-anchor" href="#subword-tokenization"><span>Subword Tokenization</span></a></h4><p>  字节级标记化可以缓解单词级标记器面临的词汇表外问题，但将文本标记化为字节会导致极长的输入序列。这会带来两点坏处：</p><ol><li>处理这些较长的序列需要模型的每一步都需要更多的计算。</li><li>较长的输入序列会在数据中产生长期依赖关系。</li></ol><p>  为了应对这个问题，我们采用<code>子词标记化</code>的方式，这是单词级标记器和字节级标记器之间的中点。</p><p>  子词标记器权衡了更大的词汇表大小，以更好地压缩输入字节序列。</p>',30)]))}]]),l=JSON.parse('{"path":"/posts/CS336_ass1.html","title":"CS336_Assignment 1 (basics)","lang":"zh-CN","frontmatter":{"title":"CS336_Assignment 1 (basics)","date":"2025-06-30T00:00:00.000Z","category":["CS336_Lab"],"tag":["公开课","LLM","Lab"],"sticky":true,"star":true,"order":-5,"description":"Assignment Overview course web:https://stanford-cs336.github.io/spring2025/ 这个homework有一定的算力要求 CS336: Language Modeling from Scratch，是Stanford开的一门课，目的是带领学生从头构建llm，通过尽量少调用现有库的方式手...","head":[["meta",{"property":"og:url","content":"https://newzone.top/posts/CS336_ass1.html"}],["meta",{"property":"og:site_name","content":"CS_Blog"}],["meta",{"property":"og:title","content":"CS336_Assignment 1 (basics)"}],["meta",{"property":"og:description","content":"Assignment Overview course web:https://stanford-cs336.github.io/spring2025/ 这个homework有一定的算力要求 CS336: Language Modeling from Scratch，是Stanford开的一门课，目的是带领学生从头构建llm，通过尽量少调用现有库的方式手..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-01T00:33:54.000Z"}],["meta",{"property":"article:tag","content":"公开课"}],["meta",{"property":"article:tag","content":"LLM"}],["meta",{"property":"article:tag","content":"Lab"}],["meta",{"property":"article:published_time","content":"2025-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-01T00:33:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CS336_Assignment 1 (basics)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-01T00:33:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Assignment Overview","slug":"assignment-overview","link":"#assignment-overview","children":[{"level":3,"title":"Byte-Pair Encoding (BPE) Tokenizer","slug":"byte-pair-encoding-bpe-tokenizer","link":"#byte-pair-encoding-bpe-tokenizer","children":[]}]}],"git":{"createdTime":1726473616000,"updatedTime":1751330034000,"contributors":[{"name":"youth00000000","email":"youthandqueen@qq.com","commits":2}]},"readingTime":{"minutes":5.2,"words":1560},"filePathRelative":"_posts/CS336_ass1.md","localizedDate":"2025年6月30日","excerpt":"<h2>Assignment Overview</h2>\\n<blockquote>\\n<p>course web:https://stanford-cs336.github.io/spring2025/</p>\\n</blockquote>\\n<p><strong>这个homework有一定的算力要求<s>毕竟要训练model</s></strong></p>\\n<p>  CS336: Language Modeling from Scratch，是Stanford开的一门课，目的是带领学生<code>从头</code>构建llm，通过尽量少调用现有库的方式<code>手搓</code>llm。<br>\\n  事实上由于我的大部分知识学习与工作都是通过<code>即用即学</code>的方式完成的，这种系统的学习确实是我所缺乏的，我将通过五个homework尽量补全llm所缺乏的知识，并希望以此提升我的code skill，方便开发新的work。<br>\\n  CS336的第一个homework被叫做basic，但是我看到这个homework的overview就觉得不是很basic，事实上这个homework涉及到的theory确实是basic的，但是完成的方式和basic还是有一定区别。<br>\\n  这个homework要完成以下几件事：</p>","autoDesc":true}')}}]);