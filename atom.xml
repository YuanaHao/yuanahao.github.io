<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://newzone.top/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://newzone.top/</id>
  <title>CS_Blog</title>
  <subtitle>算法学习, 计算机公开课博客分享平台。</subtitle>
  <icon>https://newzone.top/favicon.ico</icon>
  <updated>2025-06-30T10:31:01.972Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://newzone.top/atom.xml"/>
  <link rel="alternate" href="https://newzone.top/"/>
  <category term="Base"/>
  <category term="计算机体系结构"/>
  <category term="ASC"/>
  <category term="SOSD"/>
  <category term="CS149_Lab"/>
  <category term="CS61A"/>
  <category term="CSE234"/>
  <category term="Lab"/>
  <entry>
    <title type="text">What&amp;apos;s Automatic Differentiation?</title>
    <id>https://newzone.top/posts/What_is_Automatic_Differentiation.html</id>
    <link href="https://newzone.top/posts/What_is_Automatic_Differentiation.html"/>
    <updated>2025-06-23T04:22:38.000Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>Reference: https://huggingface.co/blog/andmholm/what-is-automatic-differentiation</p>
</blockquote>
<h2>写在开始之前</h2>
<p>这篇blog是本人结合Reference对<code>Automatic Differentiation(自动微分)</code>的总结, 目的主要是回顾Machine Learning基础并完成<code>CSE234</code>的PA1, 考虑到CSE234课程要求, 涉及到课程具体代码实现的部分将以注释&amp;伪代码的形式实现, 希望读者能自行实现<code>Automatic Differentiation</code>, Base is not only base.</p>]]></summary>
    <content type="html"><![CDATA[<blockquote>
<p>Reference: https://huggingface.co/blog/andmholm/what-is-automatic-differentiation</p>
</blockquote>
<h2>写在开始之前</h2>
<p>这篇blog是本人结合Reference对<code>Automatic Differentiation(自动微分)</code>的总结, 目的主要是回顾Machine Learning基础并完成<code>CSE234</code>的PA1, 考虑到CSE234课程要求, 涉及到课程具体代码实现的部分将以注释&amp;伪代码的形式实现, 希望读者能自行实现<code>Automatic Differentiation</code>, Base is not only base.</p>
<p>同Reference blog的建议一样, 本文也建议读者有一些<code>微积分</code> / <code>线性代数</code> / <code>机器学习</code>的基础, 有一些导数 or 梯度等概念将不会重新简述, 本文希望从应用和实现的角度对autodiff library 中的算子做再实现(也是CSE234的课程要求).</p>
<h2>Introduction</h2>
<p>在Machine Learning中, 神经网络运用了广泛的数学理论, 逐步从简单处理二分类或者多分类的简单架构逐步发展到现在拥有对话能力的LLM, 核心问题一直是优化问题, 即如何让模型进行学习?</p>
<p>现在使用的最多的, 也是被广泛认为最好的数学方法, 是<code>gradient descent</code>(梯度下降)方法及其变体. 梯度下降法是一种优化算法, 目的是通过一步步迭代来提升模型的性能, 下面是对这个算法的详细解释:</p>
<h3>梯度下降</h3>
<ol>
<li>使用一个目标函数(Loss), 计算输入的真实值与对这组输入的预测值之间的损失(or error).</li>
<li>通过求损失关于模型每个参数的偏导(求梯度)的方式, 来找出模型对损失的影响.</li>
<li>通过将每个参数减去各自的梯度(梯度缩放由学习率超参进行调整, 当然我们也可以通过编写调度器实现学习率的动态调整), 朝着loss最小化的方向调整模型参数.</li>
<li>清除所有梯度, 然后重复1-3的训练过程, 直到模型达到最佳性能(不幸的是过度训练可能导致参数在某一个方向上下降过多, 又称过拟合, 所以我们一般需要人为设置训练轮次来恰当的结束训练).</li>
</ol>
<p>这个过程显然需要一个足够强大的深度神经网络来支撑, 当然如何找到这样一个自动优化过程是复杂且艰巨的, 我们不得不感谢前人在这方面作出的杰出贡献(https://arxiv.org/pdf/1502.05767), it's an honor to follow them.</p>
<p>在开始讨论自动微分之前, 我们先看一下更为朴素的数值微分和符号微分.</p>
<h2>数值微分(Numeric Differentiation)</h2>
<p>数值微分是一种极为朴实无华的实现, 经典的极限定义可以帮我们很好的理解这一点:</p>
<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>h</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>h</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mi>h</mi></mfrac></mrow><annotation encoding="application/x-tex">
\frac{df}{dx} = \lim_{ h\to 0}\frac{f(x + h) - f(x)}{h}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">df</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1791em;vertical-align:-0.7521em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.3479em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7521em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>对于上式求导的含义我们不再赘述, 但是我们必须要注意到神经网络实际上要对多维的array做算术运算, 简单对某个x取极限并没有意义, 在ML领域, 对某个参数求数值偏导的定义, 可以认为是这样的:</p>
<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>i</mi></msub></mrow></mfrac><mo>≈</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>θ</mi><mo>+</mo><mi>h</mi><mo>⋅</mo><msub><mi>e</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><mi>h</mi></mfrac><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">
\frac{\partial f}{\partial \theta_i} \approx \frac{f(\theta + h \cdot e_i) - f(\theta)}{h} + O(h)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2074em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span></span></p>
<p>上式是 <code>forward difference</code>, 用于实现多变量函数<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>中参数向量<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>中单个参数<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\theta_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的偏导数. <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示一个单位向量，第<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>个元素为 1，其他元素均为 0.</p>
<h2>Autodiff Library</h2>
<p>这是CSE234(2025 winter) PA1一些Autodiff的算子实现, 尊重课程要求, 仅对原课程代码已经实现的算子分享全部代码, 其余算子均为个人实现, 仅提供注释供参考~</p>
<h3>课程已实现的算子</h3>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> Op</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">    """The class of operations performed on nodes."""</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> __call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">*</span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">kwargs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) -&gt; Node:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        """Create a new node with this current op.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        Returns</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="Base"/>
    <published>2025-02-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">PA -- A new journey for the OS</title>
    <id>https://newzone.top/posts/PA.html</id>
    <link href="https://newzone.top/posts/PA.html"/>
    <updated>2024-12-30T14:07:26.000Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>This blog will begin from the half of PA1
Because I thought "STFW" can solve the problems before.
I have to confirm that I have install the Ubuntu 22.04 for my CS task, so I look through the PA0 in a fast way.</p>
</blockquote>
<h2>PA1 The simplest computer</h2>
<h3>infrastructure</h3>]]></summary>
    <content type="html"><![CDATA[<blockquote>
<p>This blog will begin from the half of PA1
Because I thought "STFW" can solve the problems before.
I have to confirm that I have install the Ubuntu 22.04 for my CS task, so I look through the PA0 in a fast way.</p>
</blockquote>
<h2>PA1 The simplest computer</h2>
<h3>infrastructure</h3>
<blockquote>
<p>There always exist infrastructure where exist codes.</p>
</blockquote>
<p>The course build a significant infrainstructure called <code>Simple Debugger</code>(sdb) in the NEMU.</p>
<p>NEMU is regarded as a programm to excute other guest programm which means NEMU can know all information of the guest programm.</p>
<p>However, the information is hard to be caught by the debugger out of the NEMU, such as GDB.(set a breakpoint by GDB for the guest programm is also hard)</p>
<p>Inorder to improve the efficiency of debugging, we need to build a simple Debugger at the monitor.</p>
<p>Below are the format and functions:<br>
|instruction|format|example|explanation|
|</p>
]]></content>
    <category term="计算机体系结构"/>
    <published>2024-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">ASC2025 TEST_0_CONCURRENCY</title>
    <id>https://newzone.top/posts/0_REPORT.html</id>
    <link href="https://newzone.top/posts/0_REPORT.html"/>
    <updated>2024-12-16T05:33:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>How to find the bugs in the program</h2>
<blockquote>
<p>reference: https://nj.gitbooks.io/c/content/content/chapter10/chapter10-chinese.html</p>
</blockquote>
<h3>parallel problem bugs</h3>
<h4>unnecessary block</h4>
<ul>
<li>dead lock</li>
<li>live lock(condition not met)</li>
<li>I/O block</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>How to find the bugs in the program</h2>
<blockquote>
<p>reference: https://nj.gitbooks.io/c/content/content/chapter10/chapter10-chinese.html</p>
</blockquote>
<h3>parallel problem bugs</h3>
<h4>unnecessary block</h4>
<ul>
<li>dead lock</li>
<li>live lock(condition not met)</li>
<li>I/O block</li>
</ul>
<h4>conditional competition</h4>
<ul>
<li>data race</li>
<li>destroy constant</li>
<li>life circle issues</li>
</ul>
<h3>how to find bugs</h3>
<ul>
<li>read codes</li>
<li>set breakpoint</li>
<li>use tools</li>
</ul>
<h2>how did I find bugs in the pro</h2>
<p>below steps are tying to test a progect when i didn't know if there were bugs.</p>
<h3>step1: try to run the code and monitor the output</h3>
<p>We can compile the code to a executable file by the instruction in the terminal, just a try.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> condvar.cc</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> try</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -pthread</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -lstdc++</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>then run "try", the output is "error: data[0] = 718613".</p>
<p>so we can confirm there are some bugs in the codes, then try to find them.</p>
<p>we need to use some tools, such as <code>ThreadSanitizer</code>, to confirm the specific issue type.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">g++</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> condvar.cc</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -fsanitize=thread</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -fPIE</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -pie</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> TSan</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>then run the "TSan"</p>
<p>the output is "WARNING: ThreadSanitizer: data race (pid=30965)". so we can confirm there exist "data race" issue. then read codes to try to find if not "join()" or "condition variable" are here.</p>
<p></p>
<h3>step2: read the codes and understand the brief frame</h3>
<ul>
<li>"create_func" is a lambda expression and define the tasks of each thread.
<ol>
<li>wait "m_waiting" to start work</li>
<li>fetch a task, decrease the waiting task count</li>
<li>thread of array position += 1</li>
<li>one thread finish the task then notify the main thread by "notify_one()"</li>
</ol>
</li>
<li>the first "for circle" is set to creat the threads</li>
<li>the second "for circle" is set to finish the main thread's task
<ol>
<li>update the waiting task count and notify all threads to start working</li>
<li>wait for all threads to finish and clear the finished task count, enter the next round</li>
</ol>
</li>
<li>the last "for circle" is set to check.</li>
</ul>
<h3>step3: set some log information</h3>
<p>if we are back to the step1, you will find seem "warning" is after the data check, meaning we can't find the data error, so we must set some log information.</p>
<p>I choice to set the below codes.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// run 1000000 rounds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // update the waiting task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_waiting);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // notify all threads to start working</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_all</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // wait for all threads to finish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_finished);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        cv_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lk_finished, []() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // clear the finished task count, enter the next round</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // log information</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"finish </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">  %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, i, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>after recompile and run it again, I found suprisely the five data sum up to <code>5000000</code>, but one of them was not <code>1000000</code>.</p>
<p>the answer is found out, threads of the task didn't work balancedly, some time some threads may work more than one time in one circle, so we just need to make sure just once.</p>
<h2>how did I fix the bugs</h2>
<h3>step1: fix unbalanced work</h3>
<p>I choice to introduce a new condition variable <code>worktime</code> for 5 threads, to make sure just work one time in one circle.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">vec_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>then I add them into every threads as a judgement for starting to get work.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> create_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [](</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> tid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">tid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                // wait for the signal to start working or exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_waiting);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                // add worktime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lk_waiting, [</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">tid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(); });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                    // fetch a task, decrease the waiting task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    waiting</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                    // do the work</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                    // increase the finished task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_finished);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    finished</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    cv_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_one</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    };</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and update the worktime at the beginning of every circle.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // update the waiting task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_waiting);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        //update the worktime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // notify all threads to start working</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_all</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // wait for all threads to finish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_finished);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        cv_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lk_finished, []() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // clear the finished task count, enter the next round</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"finish </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">  %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, i, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then we can get <code>check passed!</code></p>
<p></p>
<h3>step2: exit sucessfully</h3>
<p>this issue is easy to find out the reason, we can see it in the "WARNING: ThreadSanitizer: data race (pid=30965)".</p>
<p>By analysing the warning, we can easily find the issue occur when the main thread finished and try to destroy the global variables, but other threads are using them.</p>
<p>so we just need to use a variable to notify the thread to stop and use join() function to let main thread wait other threads.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// notify the thread to stop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">store</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_all</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// use join() to wait</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">t : threads) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">t </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">joinable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">            t </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then we can exit sucessfully!</p>
<p>check passed!</p>
<h2>my answer</h2>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * This task has 5 threads, each thread will increase the corresponding element</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * in the data vector by 1. The main thread will run 1000000 rounds, in each</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * round, it will notify all threads to start working, and wait for all threads</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * to finish.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * After 1000000 rounds, the main thread will check if all elements in the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * data vector are 1000000.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 1. Find the bug in the code, and fix it.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * 2. The code can bot exit normally, fix it, ensure all working threads are</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> * finished before the main thread exit.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;condition_variable&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;cstdio&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;cstdlib&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;mutex&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;thread&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;vector&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;atomic&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::mutex;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::thread;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">unique_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">mutex</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> condvar_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">condition_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> vec_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mutex m_waiting;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mutex m_finished;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">mutex m_workonce;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">condvar_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> cv_waiting;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">condvar_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> cv_finished;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">condvar_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> cv_workonce;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">atomic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// the data to be processed</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">vec_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">vec_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">auto</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() -&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">    vec_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">thread</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> threads</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> create_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [](</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> tid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">tid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                // wait for the signal to start working or exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_waiting);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lk_waiting, [</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">tid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(); });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                    // fetch a task, decrease the waiting task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    waiting</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                    // do the work</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[tid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                    // increase the finished task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_finished);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    finished</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    cv_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_one</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">                    lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        threads</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">create_func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(i));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // run 1000000 rounds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // update the waiting task count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_waiting);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        waiting </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">worktime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // notify all threads to start working</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_all</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        lk_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // wait for all threads to finish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        lock </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(m_finished);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        cv_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(lk_finished, []() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // clear the finished task count, enter the next round</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        finished </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        lk_finished</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"finish </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">  %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> %d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, i, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">], </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    exit_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">store</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    cv_waiting</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">notify_all</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">t : threads) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">t </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">joinable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">            t </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">join</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    // check, all element in data should be 1000000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">            printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"error: data[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">] = </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, i, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"check passed</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="ASC"/>
    <published>2024-12-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">ASC2025 TEST_1_cluster</title>
    <id>https://newzone.top/posts/1_REPORT.html</id>
    <link href="https://newzone.top/posts/1_REPORT.html"/>
    <updated>2024-12-16T05:33:42.000Z</updated>
    <summary type="html"><![CDATA[<h2>Installation</h2>
<p>it's easy to finish the envirment settings, so I just talk about some issues occuered.</p>
<h3>step1: unzip the <code>baseenv.tar.gz</code></h3>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -xvf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> baseenv.tar.gz</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2>Installation</h2>
<p>it's easy to finish the envirment settings, so I just talk about some issues occuered.</p>
<h3>step1: unzip the <code>baseenv.tar.gz</code></h3>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -xvf</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> baseenv.tar.gz</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><blockquote>
<p>may the .tar.gz file be unziped to many files. my solution is packing them in a new .tar file by <code>tar cvf bassenv.tar bassenv</code>.</p>
</blockquote>
<p>then we can get the package <code>baseenv.tar</code>.</p>
<h3>step2: Load the Docker image from the .tar file</h3>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> load</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> baseenv.tar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>step3: start the container with the following command</h3>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">#node1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --cap-add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> NET_ADMIN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> baseenv:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">#node2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --cap-add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> NET_ADMIN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node2</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> baseenv:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /bin/bash</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, if we want to make sure <code>not connect to the internet from the container</code>, we can use the below instruction:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">#node1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --cap-add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> NET_ADMIN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --sysctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> net.bridge.bridge-nf-call-iptables=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> baseenv:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /bin/bash</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>reference: https://cloud.tencent.com/developer/article/2335144</p>
</blockquote>
<p>this allows us to access intranet but not to access the Internet in the container.</p>
<h2>task</h2>
<h3>task1: compile the <code>mpich</code></h3>
<blockquote>
<p>reference: https://blog.csdn.net/u014185088/article/details/121482116</p>
</blockquote>
<p>after create the continer, we can <code>cd root</code> and ues <code>ls</code> to find the <code>mpich-4.3.0b1</code>, then unzip it.</p>
<h4>step1: set mpich configure and make it</h4>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> mpich-4.3.0b1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># use --disable-fortran to ban the fortran setting</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">./configure</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --prefix=/root/mpich</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --disable-fortran</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># make it</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">make</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">make</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> install</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then set PATH:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># write</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> MPIPATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">mpich</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> MPIPATHBIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">bin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> MPIPATHINCLUDE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">include</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> MPIPATHLIB</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">lib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> MPIPATHSHARE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">share</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATHBIN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATHINCLUDE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATHLIB</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">$MPIPATHSHARE</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then we can see the <code>mpicc</code> version:</p>
<p></p>
<p>let's try a mpi programm in a continer.</p>
<p>I copy a <code>test.cpp</code> from the Internet.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;mpich/mpi.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;string.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;math.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;time.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">&lt;omp.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">&lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">//生成随机矩阵</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">generate_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	srand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">matrix;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	matrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">		matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> matrix;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">//输出矩阵</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> print_matrx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">			printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">//矩阵相乘</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> Multiplication</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> line</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	result </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">//#pragma omp parallel for num_threads(2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> line; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">			temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">			for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; k </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size; k</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">				temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[k</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">			result</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	clock_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> time1, time2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, rank, line, num;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	time1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> clock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	MPI_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">argc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">argv);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	MPI_Comm_rank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(MPI_COMM_WORLD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">rank);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	MPI_Comm_size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(MPI_COMM_WORLD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">num);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">matrix1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">matrix2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">matrix3;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">resultMg;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">revMg;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">resultMg0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	line </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> num ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">  //num为进程数，line为每个进程的行数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	matrix1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	matrix2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	matrix3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	resultMg </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	resultMg0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	revMg </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (rank </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		matrix1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> generate_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		matrix2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> generate_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"matrix1 is :</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		print_matrx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)matrix1, size);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"matrix2 is :</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		print_matrx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)matrix2, size);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		resultMg0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Multiplication</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix1,matrix2, size, line);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; m </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> line; m</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">			for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; n </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size; n</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">				matrix3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[m</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> resultMg0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[m</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> num; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">			MPI_Send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix2, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size, MPI_INT, i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, MPI_COMM_WORLD);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> num; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">			MPI_Send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line, MPI_INT, i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, MPI_COMM_WORLD);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> num; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">			MPI_Recv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(resultMg, line</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size, MPI_INT, i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, MPI_COMM_WORLD, MPI_STATUS_IGNORE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">			for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; m </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> line; m</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">				for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">; n </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> size; n</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">					matrix3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> m)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n] </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> resultMg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[m</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> n];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		time2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> clock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		print_matrx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)matrix3, size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> time2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> time1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		free</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix1);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		free</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix2);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		free</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix3);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		free</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(revMg);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		free</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(resultMg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		MPI_Recv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(matrix2, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size, MPI_INT, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, MPI_COMM_WORLD, MPI_STATUS_IGNORE);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		MPI_Recv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(revMg, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">line, MPI_INT, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, MPI_COMM_WORLD, MPI_STATUS_IGNORE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">		resultMg </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> Multiplication</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(revMg, matrix2, size, line);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">		MPI_Send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(resultMg, line</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">size, MPI_INT, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, MPI_COMM_WORLD);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">	MPI_Finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then use the below instruction copy the code to the continer.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /media/user/Data/biancheng/code/ASC/ASC_2025/test/optimize-tasks/1.cluster/test.cpp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1:/root</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>try to compile the <code>test.cpp</code>.</p>
<p></p>
<p>oops, we seem to need to use the <code>absolute address</code>.</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// fix the code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;mpich/mpi.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// right code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "/root/mpich/include/mpi.h"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then we can find <code>mpi</code></p>
<p></p>
<p>run the programm</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mpiexec</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ./mpi</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p></p>
<p>check passed!</p>
<h3>task2: configure the network for containers</h3>
<p>creat a new net for continers</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> cluster</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p></p>
<p>and add the node1 &amp; node2 into the net.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> connect</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> connect</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> cluster</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>then try to ping node2 from node1.</p>
<p></p>
<p>check passed!</p>
<h4>task3: configure ssh for the containers</h4>
<p>Firstly, we need to set a password for ssh.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">passwd</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>my password is set to <code>asc2025</code>.</p>
<p>we need to change the <code>PermitRootLogin prohibit-password</code> to <code>PermitRootLogin yes</code>, and change port from <code>22</code> to <code>8080</code>.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /etc/ssh/sshd_config</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>use <code>docker commit</code> to build a new image.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'ssh'</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'node1:ssh'</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">  node1:ssh</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>then use the new image to build two new nodes to set port.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -p8088:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --cap-add</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> NET_ADMIN</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --sysctl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> net.bridge.bridge-nf-call-iptables=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1_ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> node1:ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> /bin/bash</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>start the new continer, and start the ssh.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">/usr/sbin/sshd</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>then we can use password to connect with the continer from the host.</p>
<p></p>
<p>then we can try to login in the node1 from node2.</p>
<p></p>
<p>check passed!</p>
<h4>task4: run the MPI program in the cluster</h4>
<p>then we can use a test programm to test the connection.</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "/root/mpich/include/mpi.h"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;stdio.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> &lt;math.h&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> myid, numprocs; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> namelen;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">  char</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75"> processor_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[MPI_MAX_PROCESSOR_NAME]; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  MPI_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">argc,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">argv);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  MPI_Comm_rank</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(MPI_COMM_WORLD,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">myid); </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  MPI_Comm_size</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(MPI_COMM_WORLD,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">numprocs); </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  MPI_Get_processor_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(processor_name,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">namelen);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(stderr,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"Hello World! Process </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> of </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> on </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, myid, numprocs, processor_name);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  MPI_Finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>we can change the name of the container from the host configure, just I didn't do it.</p>
<p>check passed!</p>
<blockquote>
<p>tips: the container should exist the <code>hello</code> and the environment of the MPI.</p>
</blockquote>
]]></content>
    <category term="ASC"/>
    <published>2024-12-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Diffusion（文生图、文生视频）推理服务</title>
    <id>https://newzone.top/posts/%E6%96%87%E7%94%9F%E5%9B%BE.html</id>
    <link href="https://newzone.top/posts/%E6%96%87%E7%94%9F%E5%9B%BE.html"/>
    <updated>2024-12-16T11:49:36.000Z</updated>
    <summary type="html"><![CDATA[<h2>文生图</h2>
<p>随着transformer在文本生成方面逐步展现出的巨大潜力和ChatGPT等生成式对话AI的逐步商业化, 处理多模态任务的价值也不断被挖掘, <code>文生图</code> <code>文生视频</code>等潜力巨大的任务类型开始提上研究日程.</p>
<p>但是同生成式对话使用有限的文本量便能达成较为不错的生成效果不同, 文生视频和文生图任务由于图形任务的整体性对大块内存的使用提出了更为严苛的要求, 图块与图块 像素与像素之间的高度关联性也难以像文本推理一样通过简单的切分矩阵实现并发, 这使得最为常用的 <code>Diffusion</code>模型在生成时长和内存占用上的表现都差强人意.</p>]]></summary>
    <content type="html"><![CDATA[<h2>文生图</h2>
<p>随着transformer在文本生成方面逐步展现出的巨大潜力和ChatGPT等生成式对话AI的逐步商业化, 处理多模态任务的价值也不断被挖掘, <code>文生图</code> <code>文生视频</code>等潜力巨大的任务类型开始提上研究日程.</p>
<p>但是同生成式对话使用有限的文本量便能达成较为不错的生成效果不同, 文生视频和文生图任务由于图形任务的整体性对大块内存的使用提出了更为严苛的要求, 图块与图块 像素与像素之间的高度关联性也难以像文本推理一样通过简单的切分矩阵实现并发, 这使得最为常用的 <code>Diffusion</code>模型在生成时长和内存占用上的表现都差强人意.</p>
<p>文生图 文生视频等多模态任务中的分布式推理服务就是在这种背景下被关注的.</p>
<p>目前考虑到的针对Diffusion的优化主要集中于以下几个方面:</p>
<ul>
<li>使用更好的solver, 减少采样步数, 避免多轮采样带来的内存开销</li>
<li>利用diffusion相邻step冗余考虑适当保存activate值, 避免不必要的重计算</li>
<li>使用diffusion parallelism</li>
<li>使用一些通用优化手段,像算子并行,图优化,模型压缩等等.</li>
</ul>
<h3>DistriFusion</h3>
<p><code>https://openaccess.thecvf.com/content/CVPR2024/papers/Li_DistriFusion_Distributed_Parallel_Inference_for_High-Resolution_Diffusion_Models_CVPR_2024_paper.pdf</code></p>
<p><code>https://github.com/mit-han-lab/distrifuser</code></p>
<blockquote>
<p>2024的CVPR, 工作属于是Diffusion parallelsim的一种</p>
</blockquote>
<h4>特点</h4>
<ul>
<li>无需训练</li>
<li>加速效果较好, 可以达到6倍以上加速</li>
<li>利用了diffusion过程相邻步之间feature map的相似性</li>
</ul>
<h4>以往方法</h4>
<p></p>
<p><code>常规方法</code>: 多GPU通常仅用于批量推理. 在生成单张图像时，通常只涉及一个GPU.考虑到激活值规模庞大, 通信成本会超过分布式计算带来的节省, 张量并行等并行技术并不适合diffusion模型.</p>
<p><code>传统分批方法</code>: 将图像split成N个patch，放在N个device上进行推理，然后将N个device的结果合成为一个全分辨率的结果.<br>
但是这种方法由于缺少各个patch间的信息感知，会生成N个小图拼接而成的大图, 边界处会出现明显的接缝, 区块间引入交互又会带来过高的同步成本</p>
<blockquote>
<p>用精度换效率, 但是图片不是整体了, 这也是前言讲难以像文本推理一样通过简单的切分矩阵实现并行的原因</p>
</blockquote>
<h4>相关工作</h4>
<p>difussion核心在迭代去噪点生成内容, 用巨量的计算换取极高的生成能力, 目前优化主要集中在以下几点:</p>
<ul>
<li>高效去噪: 如将高分辨率图像压缩为低分辨率的潜在表示，并在潜在空间中学习扩散模型</li>
<li>设计无需训练的高效采样算法: 基于扩散模型与微分方程之间的联系，并利用成熟的指数积分器来减少采样步骤</li>
<li>预训练的扩散模型中提炼出生成模型: 成效不佳</li>
<li>优化扩散模型的神经推理</li>
<li>DistriFusion方法: 利用多个设备上的神经网络并行性来加速扩散过程</li>
</ul>
<p></p>
<p>针对LLM的并行方法特点是: LLM模型尺寸较大, 但激活尺寸小, 不需要引入太多通讯开销.</p>
<p>但difussion模型的特点是: 模型尺寸较小, 但激活尺寸大, 于是通信开销不得不成为主要矛盾, 目前主要只使用数据并行.</p>
<p>本文方法基于patch并行性, 切分小patch分到不同设备处理, 倾向于使用AllGather而非AllReduce进行数据交互.</p>
<h4>背景知识</h4>
<p>扩散模型通常会训练一个噪声预测神经网络模型（如U-Net）<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">ϵ_{θ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.<br>
从纯高斯噪声<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>T</mi></msub><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_{T} ∼ N(0, I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span></span></span></span>开始，该模型需要经过数十到数百次的迭代去噪步骤，以获得最终的清晰图像<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中T表示总步数.<br>
在时间步t给定含噪图像<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，模型<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">ϵ_{θ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>会将<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、t以及额外的条件c（例如文本）作为输入，以预测<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的相应噪声<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">ϵ_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.<br>
在每个去噪步骤中，可以通过以下方程推导出<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>:</p>
<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="bold">x</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mi mathvariant="normal">U</mi><mi mathvariant="normal">p</mi><mi mathvariant="normal">d</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">e</mi></mrow><mo stretchy="false">(</mo><msub><mi mathvariant="bold">x</mi><mi>t</mi></msub><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><msub><mi>ϵ</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"></mspace><msub><mi>ϵ</mi><mi>t</mi></msub><mo>=</mo><msub><mi>ϵ</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi mathvariant="bold">x</mi><mi>t</mi></msub><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">
\mathbf{x}_{t-1}=\mathrm{Update}(\mathbf{x}_t,t,\epsilon_t),\quad\epsilon_t=\epsilon_\theta(\mathbf{x}_t,t,c). 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">Update</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p>
<p>通过这个公式我们可以轻易发现<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">{x}_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>和<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">{x}_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的强依赖关系, 这给<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>与<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">t-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6984em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>步的模型<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">ϵ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>并行带来了极大的困难.</p>
<p>同时本文还指出, 处理一张1024x1024的图像时，每步需要6,763 <code>GMACs（十亿次乘加运算）</code>。随着分辨率的增加，这种计算需求会以超过二次方的速度增加，导致生成单张高分辨率图像的延迟在实际应用中变得过高.</p>
<blockquote>
<p>作者还在这里cue了一下Shih等人在2023提出的ParaDiGMS, 说利用Picard迭代以数据并行的方式并行化去噪步骤, 是可能存在无效结果的&amp;步数较大的去噪方式, 难以并行加速.
这篇文章也是NeurIPS 2023的一篇, 平均加速在2倍左右, 的确没有本文出色.</p>
</blockquote>
<p>本文又一次强调了模型分片到多个设备上，并使用张量并行进行推理的大通讯量的不可行性.</p>
<h4>本文方法</h4>
<ul>
<li>将图像分割成多个区块，在多个设备间并行化处理计算, 这存在两个选择和两个问题:
<ol>
<li>独立计算各个区块并随后拼接 -&gt; 边界处会出现明显的接缝和强烈的撕裂感</li>
<li>区块间同步传递中间激活信息 -&gt; 极高的通信开销, 甚至超过计算时间</li>
</ol>
</li>
</ul>
<p>为解决上述问题, 本文提出了一种新的并行范式--<code>位移区块并行</code>.</p>
<p><code>核心</code>:利用前一步扩散过程中稍有过时或“陈旧”的激活信息，来促进区块间的交互.</p>
<p>在计算某一区块某一层的激活信息时，并不依赖于其他区块的最新激活信息，从而使得通信可以被隐藏在后续层的计算过程中.</p>
<blockquote>
<p>两次扩散时间步的图相似度是很高的, 确实有相当一部分激活值完全可以"暂存"而不用"重计算"或者"通讯".</p>
</blockquote>
<h5>位移补丁并行</h5>
<p></p>
<p>在预测<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ϵ_{θ}(x_{t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>（为简化说明，此处省略了时间步<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>和条件<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>的输入）时，首先将<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分割成多个补丁<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_{t}^{(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>, <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_{t}^{(2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>, ..., <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_{t}^{(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>，其中N表示设备的数量. 在例图使用了N=2.每个设备都拥有模型<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">ϵ_{θ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的一个副本，并将独立且并行地处理一个单独的补丁.上标(1)和(2)分别代表第一个和第二个块，前一步的陈旧激活被加深了颜色.</p>
<p>在每一步<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>，首先将输入<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分割成N个块<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_{t}^{(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>, <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_{t}^{(2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>, ..., <span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_{t}^{(N)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>，对于每一层l和每个设备i，在获取输入激活块<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>A</mi><mi>t</mi><mrow><mi>l</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">A_{t}^{l,(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>之后，将执行两个异步操作：</p>
<ol>
<li>在设备 i 上，<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>A</mi><mi>t</mi><mrow><mi>l</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">A_{t}^{l,(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2906em;vertical-align:-0.2458em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4542em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2458em;"><span></span></span></span></span></span></span></span></span></span>被重新分散回前一步的陈旧激活<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>A</mi><mi>t</mi><mi>l</mi></msubsup></mrow><annotation encoding="application/x-tex">A_{t}^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>.这个Scatter操作的输出随后被输入到稀疏操作<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">F_{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中（线性、卷积或注意力层），它仅在新鲜区域上执行计算并产生相应的输出.</li>
<li>与此同时，对A_{t}^{l,(i)}执行AllGather操作，以准备下一步的完整激活<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>A</mi><mi>t</mi><mi>l</mi></msubsup></mrow><annotation encoding="application/x-tex">A_{t}^{l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>.</li>
</ol>
<p>最后，将最终输出聚合在一起，以近似<span v-pre="" class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϵ</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ϵ_{θ}(x_{t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϵ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h4>总结</h4>
<p>DistriFusion是一种利用多GPU并行加速扩散模型的新方法.将图像分割成多个区块，并将每个区块分配给独立的GPU进行处理.同时复用前一步骤的预计算激活值，以保持区块间的相互作用.</p>
<p>局限:</p>
<ol>
<li>对于低分辨率图像，DistriFusion的加速效果有限.</li>
<li>对于步数极少的方法，由于去噪状态迅速变化，该方法可能不适用.</li>
</ol>
<h3>PipeFusion</h3>
<p><code>https://arxiv.org/html/2405.14430v2</code></p>
<blockquote>
<p>PipeFusion可以看作是在DistriFusion上的改进与推广, 重点是把DistriFusion方法移植到了DiT模型上, 证明了DistriFusion方法的泛用性.</p>
</blockquote>
<h4>摘要</h4>
<p>PipeFusion通过将图像分割成多个patch并跨多个GPU分布网络层，采用流水线并行方式来协调通信和计算.</p>
<p>利用相邻扩散步骤输入之间的高相似性，通过复用一步旧的特征图来为当前步骤提供上下文，从而消除流水线中的等待时间</p>
<h4>问题</h4>
<ul>
<li>DiT模型的推理延迟显著，随着序列长度的增加，计算时间呈二次方增长.单GPU无法满足实际应用的延迟要求，需要跨多个计算设备并行化DiT推理.</li>
<li>DistriFusion需要为每个GPU维护所有层的KV数据，导致GPU增加时内存开销增加.</li>
<li>DistriFusion基于U-NET模型，在每个layer上做集合通信，通信开销较大.</li>
</ul>
<h4>本文方法</h4>
<blockquote>
<p>和DistriFusion相同操作如patch分割, 异步修正, warmup预热不再赘述</p>
</blockquote>
<p></p>
<p>PipeFusion与DistriFusion不同的是:</p>
<ol>
<li>采用流水线并行方式来协调不同设备上的计算和通信, 但保存原本激活值的方式和DistriFusion保持一致</li>
<li>采用P2P通信, 考虑DiT模型特点, 不再像DistriFusion每个时间步的通信都是Scatter给每个设备, 而是点对点通信, 减少通信成本</li>
<li>提升存储效率, 与DistriFusion相比，PipeFusion每个设备只存储与其特定阶段相关的参数的1/N.</li>
</ol>
<h3>xDIT</h3>
<p>DiT模型在文生图和文生视频等表现出了杰出的性能, 但是与此同时DiTs 的输入序列长度日益增长，序列增长导致Attention 机制的计算量也随之呈平方级膨胀, 推理延迟极为严重, 单卡推理必然无法满足需求, 多GPU乃至多机DiT部署是必然要求.</p>
<p>但是在之前都是基于hf diffusers库进行改造, 正如在vLLM前都是基于hf transformer进行改造, 都是临时的不成体系的方案, 迫切需求一个性能好且易用性高的DiT推理框架.</p>
<p>于是, 在PipeFusion基础上升级的xDit诞生了.</p>
<p><code>https://arxiv.org/abs/2405.14430</code></p>
<p><code>https://github.com/xdit-project/xDiT</code></p>
<p>DiT 和 LLM 推理任务特点不同, 改进思路也不同:</p>
<ol>
<li>LLM 有 Prefill 和 Decode 两阶段，分别是compute boundary和memory boundary的; 而DiT 的计算和 Prefill 相似是compute boundary的.</li>
<li>LLM 模型很大，而序列长度有限(虽然现在长文本需求也在增加);而 DiT 正好反过来，模型不大，推理时序列长度很长, TP的适用性较低.</li>
<li>LLM 模型大多收敛到微调 Llama 架构, 但DiT架构则呈现出较大差异性, 框架统一难度较大.</li>
</ol>
<p>考虑到 DiT 的特点，本文提出一系列混合并行方式, 提供了一套优雅的开发接口，针对性解决了 DiT 模型更改难度高的问题，这套开发接口尽可能可能复用 diffusers 的现有逻辑，开发者通过一些 wrapper 实现复杂的混合并行，实现高效地扩展方法.</p>
<p></p>
<h4>Overview</h4>
<h5>DiT 主干网络混合并行</h5>
<p>xDiT支持四种基础并行策略<code>以任何形式混合</code>, <code>达到近似线性效果</code>:</p>
<ol>
<li>Pipefusion Parallel</li>
<li>Sequence Parallel</li>
<li>Data Parallel</li>
<li>CFG Parallel <code>https://arxiv.org/abs/2207.12598</code></li>
</ol>
<h5>Parallel VAE</h5>
<p>针对扩散模型后处理的解码 VAE 模块 (解码器模块)在高分辨率图像生成时 OOM (Out Of Memory)问题，xDiT 实现了 Patch Parallel 版本的 VAE.</p>
<h5>简单灵活的开发接口</h5>
<h4>PipeFusion</h4>
<p>见前文</p>
<h4>USP：混合序列并行</h4>
<p>见<code>MLSys_分布式开发（选读）</code> DeepSpeed-Ulysses部分</p>
<h4>CFG Parallel</h4>
<p>Classifier-Free Guidance（CFG）是扩散模型领域的一个重要的技巧，可以提供更广泛的条件控制、减少训练负担、增强生成内容的质量和细节，以及提高模型的实用性和适应性.</p>
<p>一个输入 prompt，使用 CFG 需要同时进行 unconditional guide 和 text guide 的生成, 就是DistriFusion 中的 split batch.</p>
<h4>Hybrid Parallel</h4>
<p>xDiT 设计目标是扩展 DiT 推理过程到超大规模, 实现多机多卡, 不同并行方式混合在一起变得尤为重要.</p>
<p>PipeFusion 和 Sequence 在图像内部的不同 Patch 间并行则较为复杂, 两种并行方式的混合使用，是 xDiT 核心创新点之一.</p>
<p>PipeFusion利用过时的KV进行Attention计算，这使得PipeFusion无法像大型语言模型（LLM）那样轻松地实现并行策略的混合, 以pipe_degree=4，sp_degree=2的混合并行方法为例:</p>
<p></p>
<p>标准 SP Attention实现，输入Q，K，V和输出O都是沿着序列维度切分，且切分方式一致。如果不同rank的输入patch没有重叠，每个micro step计算出fresh KV更新的位置在不同rank间也没有重叠.</p>
<p>如下图所示，standard SP的KV Buffer中黄色部分是SP0 rank=0拥有的fresh KV，绿色部分是SP1 rank=1拥有的fresh KV，二者并不相同.</p>
<p>在这个diffusion step内，device=0无法拿到P1,3,5,7的fresh KV进行计算，但是PipeFusion则需要在下一个diffusion step中，拥有上一个diffusion step全部的KV(保留旧有激活值避免大量通讯).</p>
<p>standard SP只拥有1/sp_degree的fresh kv buffer，因此无法获得混合并行推理正确的结果.</p>
<p></p>
<p>xDiT专门定制了序列并行的实现方式，以适应这种混合并行的需求.</p>
<p>xDiT使用<code>xFuserLongContextAttention</code>把SP的中间结果存在KV Buffer内.</p>
<p>效果如下图，每个micro-step SP执行完毕后，SP Group内不同rank设备的fresh KV是相互补充的.</p>
<p>这样一个diffusion step后，SP Group所有设备的KV Buffer都更新成最新，供下一个Diffusion Step使用.</p>
<p></p>
<h4>Parallel VAE</h4>
<p>VAE 模块在高清图片生成时, 会导致OOM(见<code>https://github.com/huggingface/diffusers/issues/5924</code>).</p>
<p>在xDiT开发了 DistVAE解决了这个问题, 使用了两种关键策略:</p>
<ol>
<li>SP: 特征图分割成多个 Patch，并在不同设备上进行序列并行 VAE 解码, 中间激活所需的峰值内存减少到 1/N.</li>
<li>分块输入处理: 输入特征图分割成块，并依次送入卷积运算符</li>
</ol>
]]></content>
    <category term="SOSD"/>
    <published>2024-12-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">MLSys_分布式开发</title>
    <id>https://newzone.top/posts/AISys_%E5%88%86%E5%B8%83%E5%BC%8F.html</id>
    <link href="https://newzone.top/posts/AISys_%E5%88%86%E5%B8%83%E5%BC%8F.html"/>
    <updated>2025-06-23T04:22:38.000Z</updated>
    <summary type="html"><![CDATA[<h2>为什么AI需要分布式系统</h2>
<h3>什么是分布式系统</h3>
<p>分布式系统顾名思义，就是将单一计算机节点要做的任务<code>分布</code>在多个计算机节点上完成的，各个节点之间通过网络进行通讯的计算机系统。</p>
<p>这种系统的好处是显而易见的，我们可以把一台机器的Task进行切分，可能大幅度<code>提升计算效率</code>；我们可以把一台机器存不下的任务放到多个结点里面，<code>拓展数据规模</code>。</p>
<p>但同时也可能引入更多的问题，多台机器之间通讯耗费的时间会不会比原先计算的时间更长？切分后的任务如何再将结果重新合在一起？这些都问题都有进一步研究的价值。</p>]]></summary>
    <content type="html"><![CDATA[<h2>为什么AI需要分布式系统</h2>
<h3>什么是分布式系统</h3>
<p>分布式系统顾名思义，就是将单一计算机节点要做的任务<code>分布</code>在多个计算机节点上完成的，各个节点之间通过网络进行通讯的计算机系统。</p>
<p>这种系统的好处是显而易见的，我们可以把一台机器的Task进行切分，可能大幅度<code>提升计算效率</code>；我们可以把一台机器存不下的任务放到多个结点里面，<code>拓展数据规模</code>。</p>
<p>但同时也可能引入更多的问题，多台机器之间通讯耗费的时间会不会比原先计算的时间更长？切分后的任务如何再将结果重新合在一起？这些都问题都有进一步研究的价值。</p>
<h3>为什么AI训练需要分布式系统</h3>
<p>在训练AI时，无论在CV方向还是NLP等其他方向，无论使用哪一种模型，总是绕不开<code>训练集</code>和<code>测试集</code>这两部分，我们总要拿出一部分数据用来预训练模型，另一部分用来测试模型效果。</p>
<p><code>数据集越大，训练效果越好</code>，这基本上是在不考虑机器性能上限的情况下，我们针对AI训练达成的一种共识，所以在训练AI时我们希望能使用尽可能大的数据集，使用尽可能多的参数，来对尽可能多的标签进行刻画。但可惜一台机器的性能总是有限的。</p>
<p>这个时候就不得不引入<code>分布式系统</code>来改善这种局面了，如果我们一台机器、一张GPU/TPU没办法高效完成我们的运算，那我们可以分到多张卡上面；如果我们一台机器存储不开我们的数据集，那我们可以分到多台设备上，或者考虑让CPU也存储一部分模型数据。这就是AI使用分布式系统想要解决的问题。</p>
<h2>分布式系统如何发挥作用</h2>
<h3>数据分布式的一些基本想法</h3>
<p>如果我们希望分布式系统在AI训练中发挥他的力量，我们要怎么做呢？大家都对ML有一些基本的认识了，无论哪一种模型，在训练过程中总会有数据（输入、输出），模型（参数、激活函数）等等需要保存的东西。</p>
<p>现在假定我们要做一个训练任务，我们有我们自己的很大的<code>数据集</code>，我希望能把这个数据<code>很快的训练完</code>，那我们就可以考虑把数据<code>切分</code>成好几份，然后给<code>不同的GPU</code>去算每一个单独的部分，这种每个一份数据切分成多份，给不同的GPU做计算的方式，但每一个GPU均做<code>保留完整的模型</code>做计算，被我们称作<code>数据并行（Data Patallel，简称DP）</code>。</p>
<p>既然可能有很大的<code>数据集</code>需要切分，那自然也可能有很大的<code>模型</code>进行切分，让每一个GPU仅保留<code>几个隐藏层的模型</code>（参数、激活函数），这样可以训练更大的模型，提升训练精度，这种按层切分模型，不切分数据的方式，被称作<code>模型并行（Model Patallel，简称MP）</code>。</p>
<p>这种按层切分的方式固然可以增加可容纳的模型的大小，但是仅让一个卡存模型的几层在计算某些必须要用到之前的数据的模型时可能不尽如人意，通讯成本会比较高昂。</p>
<p>为了解决层切分的弊端，我们可以考虑将计算过程中的算子/计算矩阵进行切分，让每一张卡只保留必须的参数和算子，产生部分输出，这样就可以将每一部分计算矩阵进行并发处理，我们将这种方式称作<code>张量并行/算子并行（Tensor Patallel，简称TP）</code>，谷歌专门为TP开发了TPU进行并发适配，TP也是应用较广的基本并发方式。</p>
<p>既然我们有了对数据切分的方法，有了对模型算子切分的方法，那我们也可以考虑进行结合，既切分优化器状态，又切分模型的参数、梯度，这种并行方式被称作<code>完全分片数据并行（Fully Sharded Data Parallel，简称FSDP）</code>。</p>
<p>前面所提及的方法，是在利用切分层内数据/优化器状态/模型绕过MP方法按层切分时可能带来的通讯瓶颈，但是也可以利用类似CPU指令流水线执行的方式，进行数据计算，切分模型让不同GPU延后计算开始时间，从而保证通讯无boundary，这种方式被称作<code>流水线并行（Pipe Parallel，简称PP）</code>。</p>
<p>在探讨了DP、PP、TP基本并行方式后，我们可以考虑将三种并行方式进行综合，考虑一些综合利用并行方式的策略，这种并行考量被称为<code>3D并行</code>。</p>
<p>事实上对于采用哪种并行模式，要用多少张卡进行并行，并行中使用的参数如何调整，是一件非常复杂的事情，我们期望有可以<code>自动为我们选定并行方法的策略</code>，这种策略被称作<code>自动并行</code>。</p>
<h2>数据并行（DP）</h2>
<h3>典型数据并行的流程</h3>
<p></p>
<p></p>
<ul>
<li>分配n块计算GPU（图中0-2）;1块梯度收集GPU</li>
<li>每块GPU均拷贝一份完整的模型</li>
<li>把一份Data（也可以是一个batch）切分成若干份给不同的GPU</li>
<li>每一块GPU完成Forward和Backward后，计算出本地的梯度</li>
<li>把本地梯度push到梯度收集GPU，梯度收集GPU聚合梯度</li>
<li>计算GPU从聚合GPU中pull完整梯度，更新模型参数，保证各个计算GPU模型同步</li>
</ul>
<blockquote>
<p>聚合再下发梯度操作被称为<code>AllReduce</code></p>
</blockquote>
<h3>Horovod</h3>
<blockquote>
<p>Horovod: fast and easy distributed deep learning in TensorFlow</p>
</blockquote>
<p><code>https://arxiv.org/abs/1802.05799</code> <code>https://github.com/uber/horovod</code></p>
<p>传统的DP在带来使用大数据集可能的同时，又同时增加了额外的通讯开销，本文还指出DP代码重构成本较大。</p>
<p>本文通过在不同数量卡上训练结果进行说明：<br>
</p>
<p>可以明显看到GPU数量增多时，TensorFlow框架下的通讯开销越大，在128卡时甚至已经超过训练开销。</p>
<p>为了解决传统DP计算节点和聚合节点比例不好确定导致的通讯成本/计算成本过大的问题，本文指出了ring-allreduce的方式。</p>
<h4>Ring-AllReduce</h4>
<p>假设有4块GPU，每块GPU上的数据也对应被切成4份。AllReduce就是要让每块GPU上的数据都变成箭头右边汇总的样子。</p>
<p></p>
<p>Ring-AllReduce将这个过程分为<code>Reduce-Scatter</code>和<code>All-Gather</code>。</p>
<h5>Reduce-Scatter</h5>
<p>定义网络拓扑关系，使得每个GPU只和其<code>相邻的两块GPU通讯</code>。每次发送对应位置的数据进行累加。每一次累加更新都形成一个拓扑环。</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>3次更新之后，每块GPU上都有一块数据拥有了对应位置完整的聚合（图中红色）。此时，Reduce-Scatter阶段结束。进入All-Gather阶段。目标是把红色块的数据广播到其余GPU对应的位置上。</p>
<h5>All-Gather</h5>
<p>相邻GPU对应位置进行通讯，对应位置数据不再做相加，而是直接替换</p>
<p></p>
<h4>Horovod工作</h4>
<ul>
<li>将百度的 TensorFlow ring-allreduce 算法的实现转化为一个独立的 Python 包，命名为 Horovod</li>
<li>使用 NCCL 库实现了 TensorFlow ring-allreduce，并优化了性能</li>
<li>添加了对单机多卡的支持</li>
<li>改进了 API，添加 broadcast 操作，仅需 4 步即可使用 Horovod</li>
</ul>
<h4>使用方法</h4>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>import tensorflow as tf</span></span>
<span class="line"><span>import horovod.tensorflow as hvd</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 初始化 Horovod</span></span>
<span class="line"><span>hvd.init()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 固定 GPU 以处理本地 rank（每个进程一个 GPU）</span></span>
<span class="line"><span>config = tf.ConfigProto()</span></span>
<span class="line"><span>config.gpu_options.visible_device_list = str(hvd.local_rank())</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 构建模型...</span></span>
<span class="line"><span>loss = ...</span></span>
<span class="line"><span>opt = tf.train.AdagradOptimizer(0.01)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加 Horovod 分布式优化器</span></span>
<span class="line"><span>opt = hvd.DistributedOptimizer(opt)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加hook，在初始化期间将变量从 rank 0 广播到所有其他进程</span></span>
<span class="line"><span>hooks = [hvd.BroadcastGlobalVariablesHook(0)]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建训练操作</span></span>
<span class="line"><span>train_op = opt.minimize(loss)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># MonitoredTrainingSession 负责会话初始化、从检查点恢复、保存到检查点以及在完成或发生错误时关闭</span></span>
<span class="line"><span>with tf.train.MonitoredTrainingSession(checkpoint_dir="/tmp/train_logs",</span></span>
<span class="line"><span>                                       config=config,</span></span>
<span class="line"><span>                                       hooks=hooks) as mon_sess:</span></span>
<span class="line"><span>    while not mon_sess.should_stop():</span></span>
<span class="line"><span>        # 执行同步训练</span></span>
<span class="line"><span>        mon_sess.run(train_op)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>PyTorch DDP</h3>
<blockquote>
<p>PyTorch Distributed: Experiences on Accelerating Data Parallel Training</p>
</blockquote>
<p><code>https://arxiv.org/abs/2006.15704</code> <code>https://github.com/pytorch/pytorch/</code></p>
<h4>Python前端API</h4>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> 1 import torch</span></span>
<span class="line"><span> 2 import torch.nn as nn</span></span>
<span class="line"><span> 3 import torch.nn.parallel as par</span></span>
<span class="line"><span> 4 import torch.optim as optim</span></span>
<span class="line"><span> 5</span></span>
<span class="line"><span> 6 # initialize torch.distributed properly</span></span>
<span class="line"><span> 7 # with init_process_group</span></span>
<span class="line"><span> 8</span></span>
<span class="line"><span> 9 # setup model and optimizer</span></span>
<span class="line"><span> 10 net = nn.Linear(10, 10)</span></span>
<span class="line"><span> 11 net = par.DistributedDataParallel(net)</span></span>
<span class="line"><span> 12 opt = optim.SGD(net.parameters(), lr=0.01)</span></span>
<span class="line"><span> 13</span></span>
<span class="line"><span> 14 # run forward pass</span></span>
<span class="line"><span> 15 inp = torch.randn(20, 10)</span></span>
<span class="line"><span> 16 exp = torch.randn(20, 10)</span></span>
<span class="line"><span> 17 out = net(inp)</span></span>
<span class="line"><span> 18</span></span>
<span class="line"><span> 19 # run backward pass</span></span>
<span class="line"><span> 20 nn.MSELoss()(out, exp).backward()</span></span>
<span class="line"><span> 21</span></span>
<span class="line"><span> 22 # update parameters</span></span>
<span class="line"><span> 23 opt.step()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PyTorch在设计API时做到了仅调用第11行代码中的DistributedDataParallel部分，就可以实现从本机训练到分布式训练的部署。</p>
<h4>梯度同步算法</h4>
<p>论文中所提到的DP背景本篇blog前文均有提及，不再赘述。</p>
<h5>传统做法</h5>
<ul>
<li>batch较小时，通讯效率低</li>
<li>计算与聚合之间存在间隔，很难做到即时通讯。</li>
</ul>
<h5>改进做法</h5>
<p>PyTorch使用<code>Gradient Bucketing</code>，在小batch时，选择收集到一定量的梯度，再做聚合和同步。</p>
<p>PyTorch使用<code>hook</code>机制，在反向传播计算完成后，调用自定义函数，当在同一个bucket中的梯度的hook都被调用后，就调用AllReduce对该bucket进行通信。</p>
<p>这种方式有两个问题需要注意：</p>
<p>（1）由于每个机器（进程）是独立计算的，因此不同机器之间处理的bucket的顺序将会不一致，这会导致梯度同步结果出现错误。因此，我们需要保证不同机器处理bucket的顺序一致。</p>
<blockquote>
<p>使用参数的反序作为梯度放入bucket的顺序。依据是，后向传播的顺序与梯度更新的顺序大致可认为是相同的。</p>
</blockquote>
<p>（2）不同迭代中，使用的参数可能不相同，使得某些参数的梯度不需要用到。</p>
<blockquote>
<p>前向传播结束后从输出开始遍历计算图，记录哪些参数参与计算，哪些参数没有参与计算，对于没有参与计算的参数，则直接标记为ready。</p>
</blockquote>
<h5>集合通讯库</h5>
<p>PyTorch DDP支持三种通讯库：<code>NCCL</code>，<code>Gloo</code>和<code>MPI</code>。DDP支持用户使用统一的API ProcessGroup来调用不同的集合通讯库。</p>
<ul>
<li><code>NCCL doc</code>:<code>https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/api.html</code></li>
<li><code>Gloo doc</code>:<code>https://docs.solo.io/gateway/latest</code></li>
<li><code>MPI doc</code>:<code>https://www.open-mpi.org/doc/</code></li>
</ul>
<h2>FSDP并行</h2>
<h3>ZeRO</h3>
<blockquote>
<p>ZeRO: memory optimizations toward Training trillion parameter Models</p>
</blockquote>
<p><code>https://github.com/microsoft/DeepSpeed</code> <code>https://arxiv.org/abs/1910.02054</code></p>
<h4>Abstract</h4>
<p>深度学习模型在训练万亿级别参数时存在根本性限制，现有DP（数据并行）、MP（模型并行）方法无法满足日益增长的参数量需求，ZeRO（零冗余优化器）消除了数据和模型并行训练中的内存冗余，同时保持了低通信量和高计算粒度（计算与通信比率的定量或定性度量），使我们能够根据设备数量按比例扩展模型大小，同时保持高效率，实现超线性优化。</p>
<h4>Extended Introduction</h4>
<p>巨量参数可以大幅提升NLP处理能力，但参数量的上升在传统的单机GPU、TPU运算中无以为继，简单增加机器数量也用处不大。</p>
<p>现有的PP（流水线并行）、MP都在通信和计算效率之间权衡，但重点是计算规模和速度。</p>
<p>现有系统在模型训练中内存消耗的全部范围，并将其分为两部分:</p>
<p>1）对于大型模型，【大部分内存】被模型状态占用，包括优化器状态、梯度和参数（不得不保存的模型内容）。</p>
<p>2）剩余内存被激活、临时缓冲区和不可用的碎片内存所消耗，本文将其统称为残差状态（residual states）。</p>
<h4>Where Did All the Memory Go</h4>
<p>在模型计算的过程中，只有很少一部分被过程中产生的冗余量使用了（residual states），大部分内存都被用于模型本身数据的存储和运算（model states），ZeRO使用不同的方式优化这两种内存使用。</p>
<h4>Model States: Optimizer States, Gradients and Parameters</h4>
<p>论文以Adam优化器为例说明了模型造成的内存浪费是一件难以接受的事情，Adam本身对每一个参数都需要保留momentum和variance两个参数进行数据更新。</p>
<p>看上去这是仅仅由1变2的内存保留变化，但是由于NVIDIA对于fp16精度计算的高优化度，要服务于计算速度内存变化就会发生膨胀。</p>
<p>一般来说，在计算时，参数、输入、输出，均采用fp16半精度运算，但是考虑在更新权重的时候，可能在模型训练过程中梯度不大等原因，如果还是使用半精度进行运算，可能并不会产生权重累计，导致模型训练失效，所以此时应采用fp32的全精度计算，这又是一个仅在计算时才能用到的额外copy。</p>
<blockquote>
<p>FP32:1位符号位，8位指数位，23位尾数位<br>
FP16:1位符号位，5位指数位，10位尾数位<br>
BF16:1位符号位，8位指数位，7位尾数位</p>
</blockquote>
<p>假设有Ψ个参数，那就有4Ψ个byte（fp16）存储模型的参数和输入，同时又有12Ψ个byte（fp32）存储momentum和variance（Adam），也就是单计算仅需4Ψ，但是在更新参数进行新的计算时，需要额外的12Ψ，本文将其记作2Ψ+2Ψ+KΨ，其中K取决于模型。</p>
<h4>Residual Memory Consumption</h4>
<h5>Temporary buﬀers</h5>
<p>是指通讯过程中、计算过程中产生的一些临时数据.</p>
<h5>Memory Fragmentation</h5>
<p>是指碎片化内存，用pytorch等使用虚拟内存分配方式的库时，可能内存池的维护并不能做到完全利用，论文假设有30%内存其实根本无法使用。</p>
<h4>ZeRO: Insights and Overview</h4>
<p>这一部分主要介绍作者使用ZeRO的一些想法。</p>
<h5>Insights and Overview: ZeRO-DP</h5>
<p>a）数据并行比模型并行更好，效率更高，因为通讯更少，计算粒度更精细</p>
<p>b）数据并行内存使用并不高效，因为每一个分发计算都需要完全copy所有数据</p>
<p>c）两种并行都需要存储模型状态变量，单就这一块部分内存而言，两者使用均不高效。</p>
<p>我们可以考虑在某一个GPU中存储和更新参数，而在其他GPU需要使用其进行计算时，再进行通讯获取参数，从而降低内存占用。</p>
<h4>Insights and Overview: ZeRO-R</h4>
<h5>Reducing Activation Memory</h5>
<p>a）MP占据模型内存，但是需要时常更新</p>
<p>b）大模型即使的带宽小的情况下，也可以考虑每个GPU都各自保存和重算部分数据</p>
<p>ZeRO考虑可以使用将模型内存切分成多分，分开重算，多次通讯的方式收集数据，减少内存使用。</p>
<h5>Managing Temporary buﬀers</h5>
<p>对于临时缓存采用开一段固定大小内存的方式进行反复存储。</p>
<h5>Managing fragmented Memory.</h5>
<p>内存碎片通过对不同寿命的内存进行整理，减少内存释放和分配的时间</p>
<h4>Deep Dive into ZeRO-DP</h4>
<h5>ZeRO1</h5>
<p>对优化器本身存储的fp32数据进行切分，使每个GPU仅留1/N份数据。</p>
<h5>ZeRO2</h5>
<p>对数据并行中存储的fp16梯度进行切分，使每个GPU仅留1/N份数据。</p>
<h5>ZeRO3</h5>
<p>对数据并行中存储的fp16参数进行切分，使每个GPU仅留1/N份数据，使用时通讯获取完整参数。</p>
<p>ZeRO1/2依托allreduce算法实现，NVIDIA本身支持这种优化并不会有通讯增加，但是ZeRO3需要对参数进行切分和更新，每次都会有Ψ 的额外通讯开销，但是事实上可以考虑在不同隐藏层中实现异步更新参数 ，使得参数额外开销尽可能减少。</p>
<h4>Deep Dive into ZeRO-R</h4>
<h5>Partitioned Activation Checkpointing</h5>
<p>采用Megatron的模型并行方式，每个GPU保存1/N参数，对切分后部分输入分开运算，使用reduce-scatter更新各个参数状态，与ZeRO-DP的区别是，计算参数时，每个GPU都没有保存或通讯获取完整的参数，而是对输出进行通讯和更新。</p>
<h5>Constant Size Buﬀers</h5>
<p>使用固定大小buffer指定数据的单批发送量，保证带宽不浪费。</p>
<h5>Memory Defragmentation</h5>
<p>将数据池分为两部分，一部分存储大批量的计算数据，另一部分动态存储临时数据。</p>
<h3>ZeRO-Offload</h3>
<blockquote>
<p>ZeRO-Offload：Democratizing Billion-Scale Model Training</p>
</blockquote>
<p><code>https://arxiv.org/pdf/2101.06840</code>  <code>https://arxiv.org/pdf/2101.06840</code></p>
<h4>背景</h4>
<p>GPU内存占用是一件非常昂贵的事情，在过去训练中人们往往忽略了CPU的计算潜力，高估了GPU的存储性能。</p>
<p>ZeRO-Offload 优化：尽量减少数据在 GPU 与 CPU 之间的移动，并减少 CPU 计算时间，同时最大限度地节省 GPU 上的内存。</p>
<h4>Efficiency</h4>
<p>论文提出了一种名为Efficiency的offload策略，通过分析确定了CPU和GPU设备之间的最佳计算和数据划分策略，以在三个关键方面达到最优化：</p>
<ul>
<li>在CPU上的计算量比GPU少多个数量级，防止CPU性能瓶颈；</li>
<li>最小化CPU和GPU之间的通信量，防止通信瓶颈；</li>
<li>在实现最小通信量的同时，可证明地最大化节约GPU内存。</li>
</ul>
<p>offload 优化器计算要求CPU进行O(M)次计算，而GPU需进行O(MB)次计算，其中M和B分别为模型规模和 batch size 。在大多数情况下， batch size 较大，CPU计算量并不是瓶颈，但对于小 batch size，CPU计算量可能成为瓶颈。为了解决这个问题，采取了两种优化措施：</p>
<ul>
<li>高效的CPU优化器，其速度比现有技术快6倍；</li>
<li>延迟一步的参数更新，允许将CPU优化器步骤与GPU计算重叠，同时确保准确性。这两种措施共同保证了ZeRO-Offload在小 batch size 下也能保持效率。</li>
</ul>
<h4>Unique Optimal Offload Strategy</h4>
<p>为了确定最佳的下载策略，ZeRO-Offload将深度学习训练建模为数据流图，将该图分割为CPU和GPU设备之间的部分。</p>
<p>训练的计算复杂度通常为O(MB)，其中M为模型大小，B为有效batch size。为避免CPU计算成为瓶颈，只有那些计算复杂度低于O(MB)的计算才能转移到CPU上</p>
<p>FWD 和 BWD 的计算复杂度都是O(MB)，必须在GPU上进行，而其余的计算，如范数计算、权重更新等，其复杂度为O(M)，可以转移到CPU上</p>
<p></p>
<p>还需要最小化 CPU 与 GPU 的通信带宽，如图中所示，最小通信量为 BWD后 GPU 发送到 CPU 的 2M 梯度与 CPU 发送到 GPU 的 2M 参数，只有将 fp32 模型状态（momentum 32、variance 32和p32），Param Update 和 float2half 计算放置在一起，为一个 CPU 上的 Update Super Node，才能达成最小通信量策略</p>
<h4>ZeRO-Offload Schedule</h4>
<h5>单卡策略</h5>
<p>ZeRO-Offload将数据进行分区，将fp16参数存储在GPU上，fp16梯度和所有优化器状态存储在CPU上。</p>
<p>在训练过程中，首先通过 FWD 计算损失。由于fp16参数已经位于GPU上，因此这部分计算不需要与CPU进行通信。</p>
<p>在 BWD 过程中，不同参数的梯度在后向调度的不同位置计算。ZeRO-Offload可以立即将这些梯度逐个或切分传输到 CPU 内存中。</p>
<p>因此，在将梯度传输到CPU内存之前，只需要在GPU内存中临时保存少量的梯度。此外，每个梯度传输可以与反向计算重叠，消除大部分通信成本。</p>
<p>在 BWD 之后，ZeRO-Offload在CPU上直接更新fp32参数和剩余的优化器状态，并将更新后的 fp32 参数从 CPU 内存复制到 GPU 内存中的fp16参数中。</p>
<blockquote>
<p>下图GPU与CPU二次通信应该是从CPU到GPU</p>
</blockquote>
<p></p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>for_parallel rank in range(world_size):</span></span>
<span class="line"><span>  # 初始化每个进程的层</span></span>
<span class="line"><span>  initialize_layers()</span></span>
<span class="line"><span>  for batch in dataset:</span></span>
<span class="line"><span>    # 前向传播</span></span>
<span class="line"><span>    x = forward(batch)</span></span>
<span class="line"><span>    # 计算损失并反向传播</span></span>
<span class="line"><span>    compute_loss(x, batch).backward()</span></span>
<span class="line"><span>    # 反向传播梯度</span></span>
<span class="line"><span>    backward(x.grad)</span></span>
<span class="line"><span>    # 更新参数</span></span>
<span class="line"><span>    step()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def _is_owner(i):</span></span>
<span class="line"><span>  # 判断当前进程是否拥有第 i 层</span></span>
<span class="line"><span>  return True if rank owns i else False</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def initialize_layers():</span></span>
<span class="line"><span>  for i in range(num_layers):</span></span>
<span class="line"><span>    l = layers[i]</span></span>
<span class="line"><span>    # 在 GPU 上分配半精度参数</span></span>
<span class="line"><span>    allocate_on_gpu l.param_fp16</span></span>
<span class="line"><span>    if _is_owner(i):</span></span>
<span class="line"><span>      # 在 CPU 上分配全精度参数、优化器状态和梯度</span></span>
<span class="line"><span>      allocate_on_cpu l.param_fp32</span></span>
<span class="line"><span>      allocate_on_cpu l.optim_states_fp32</span></span>
<span class="line"><span>      allocate_on_cpu l.param_grad</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def forward(x):</span></span>
<span class="line"><span>  # 前向传播逻辑</span></span>
<span class="line"><span>  for i in range(num_layers):</span></span>
<span class="line"><span>    x = layers[i].forward(x)</span></span>
<span class="line"><span>  return x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def backward(dx):</span></span>
<span class="line"><span>  # 反向传播逻辑</span></span>
<span class="line"><span>  for i in range(num_layers, 0, -1):</span></span>
<span class="line"><span>    dx = layers[i].backward(dx)</span></span>
<span class="line"><span>    # 将梯度减少到拥有该层的进程</span></span>
<span class="line"><span>    reduce(layers[i].grad, dest_rank = _owner_rank(i))</span></span>
<span class="line"><span>    if _is_owner(i):</span></span>
<span class="line"><span>      # 将梯度复制到 CPU</span></span>
<span class="line"><span>      l.cpu_grad.copy(l.grad)</span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>      pass</span></span>
<span class="line"><span>    # 删除 GPU 上的梯度</span></span>
<span class="line"><span>    del layers[i].grad</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def step():</span></span>
<span class="line"><span>  # 参数更新逻辑</span></span>
<span class="line"><span>  for i in range(num_layers):</span></span>
<span class="line"><span>    l = layers[i]</span></span>
<span class="line"><span>    if _is_owner(i):</span></span>
<span class="line"><span>      # 在 CPU 上更新参数</span></span>
<span class="line"><span>      update_in_cpu(l.optim_states_fp32,</span></span>
<span class="line"><span>                    l.cpu_grad,</span></span>
<span class="line"><span>                    l.param_fp32)</span></span>
<span class="line"><span>      # 将更新后的参数复制回 GPU</span></span>
<span class="line"><span>      l.param_fp16.copy(l.param_fp32)</span></span>
<span class="line"><span>    # 广播更新后的参数</span></span>
<span class="line"><span>    BROADCAST(l.param_fp16, src = _owner_rank(i))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>多卡策略</h5>
<p>ZeRO-Offload 将梯度和优化器状态在不同的 GPU 之间进行 partition，并且每个 GPU 将自己的 part offload 到 CPU 内存中，存储持续整个训练过程</p>
<p>BWD 过程中，在 GPU 上 reduce-scatter 计算梯度并平均，每个 GPU 仅将属于其 part 的平均梯度 offload 到 CPU 内存中</p>
<p>一旦梯度在 CPU 上可用，优化器状态 part 对应的每个 DP 进程直接在 CPU 上并行更新对应的参数 part</p>
<p>更新完成后，参数 part 发送到 GPU，在 GPU 上对参数进行类似 ZeRO-2 的 all-gather 操作</p>
<p></p>
<h2>流水线并行</h2>
<h3>GPipe</h3>
<blockquote>
<p>GPipe: Efficient Training of Giant Neural Networks using Pipeline Parallelism</p>
</blockquote>
<p><code>https://arxiv.org/abs/1811.06965</code></p>
<h4>Gpipe Abstract</h4>
<p>增大模型规模可以提升模型效果，但是单卡/单机GPU内存有限，必须引入分布式系统</p>
<p>GPipe使用模型并行（MP）方案，将模型切分成一连串stage，每个stage放在独立的设备（GPU/TPU）上，实现对超大规模模型的支持</p>
<p>利用Pipeline（PP）的方案，提高了模型并行模式下的设备利用率</p>
<p>最终GPipe通过更大规模的模型和更大的batch_size，在图像和NLP的模型上都得到更好的模型效果。</p>
<h4>Design</h4>
<h5>Naive Model Parallelism</h5>
<p>论文中提到的MP就是传统的MP方案，不是Magatron-LM提出的新MP方案（事实上是TP），对数据按层切分，而非对所有输入、输出、参数都按块切分。</p>
<p></p>
<p>模型有 12 层（layer），可以切为 4 份（4个cell），每份 3 层。然后每份放到一块 GPU 上</p>
<p>第 k 个 cell 的模型参数，就放在第 k 块 GPU 上。</p>
<p>Fk和 Bk 分别表示第 k 个 cell 的 forward 和 backward 计算</p>
<p></p>
<p>单批量以这种顺序进行计算，Fk和 Bk 分别表示第 k 个批次的forward和backward运算（注意与上张图不同），每一种颜色代表一块 GPU，每一列代表一个时间段</p>
<p>问题是：每块 GPU 都会有大量的空闲时间</p>
<h5>Pipeline Parallelism 1 - Split into micro-batches</h5>
<p>单batch（mini-batch）切成更小的micro-batch，然后流水线并行（类似CPU指令执行）</p>
<p></p>
<blockquote>
<p>为什么不流水线并行batch，而是切分后再流水线并行？
多batch可以提速，但占用空间会多很多<br>
多batch训练时，可能会导致梯度更新不稳定，结果收敛不明显</p>
</blockquote>
<h5>Pipeline Parallelism 2 - re-materialization</h5>
<p>GPU 只保留最开始的输入，中间结果全部丢掉；计算梯度时，再重新计算这些中间结果。</p>
<p>减少计算时内存占用，但要增加计算时长。</p>
<h2>张量并行（TP）</h2>
<h3>Megatron-LM</h3>
<blockquote>
<p>Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism</p>
</blockquote>
<p><code>https://arxiv.org/abs/1909.08053</code> <code>https://github.com/NVIDIA/Megatron-LM</code></p>
<h4>Model Parallel Transformers</h4>
<ul>
<li>在MLP中最常用的操作是MM + GELU，即输入与参数矩阵相乘 和 激活函数</li>
<li>一种方法是沿着其行(row)将weight矩阵A分割，并沿着其列(columns)输入X分割，来实现tensor-model-parallel，从下图中我们可以看出，在该方法下，需要通过同步来保障语义对等。</li>
</ul>
<p></p>
<ul>
<li>另一种方法是沿着它的列(columns)分割A，这种方法的好处是保障了各自在独立计算时的语义对等，不需要进行额外通讯</li>
</ul>
<p></p>
<p>不过由于我们使用的A是同一个，在反向传播时要保证在保存不同切分W的GPU中均及时更新A，在PyTorch中可以通过下面的代码简单实现：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class f(torch.autograd.Function):</span></span>
<span class="line"><span> def forward(ctx, x):</span></span>
<span class="line"><span>  return x</span></span>
<span class="line"><span> def backward(ctx, gradient):</span></span>
<span class="line"><span>  all_reduce(gradient)</span></span>
<span class="line"><span>  return gradient</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>通过结合上述两种方法，可以在transformer中实现简单并发，针对MLP、SA两个环节做了如下优化，实现MLP的整体的tensor-model-parallel且语义和原始MLP对等：</li>
</ul>
<p></p>
<ul>
<li>在优化 embedding 层时，PyTorch 将 embedding 操作视为对输入进行索引操作，即在权重矩阵上执行 index_select 操作。实际上，这个操作等价于先对输入进行 one-hot 编码，然后与权重矩阵进行矩阵乘法（mm）操作。可以将 embedding 层视为线性层来处理，并使用模型并行操作来优化。</li>
</ul>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>class VocabParallelEmbedding():</span></span>
<span class="line"><span>    def __init__(self, num_embeddings, embedding_dim, init_method=init.xavier_normal_):</span></span>
<span class="line"><span>        super(VocabParallelEmbedding, self).__init__()</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>        # 通过获取当前 tensor_model_parallel 的 rank 来确定当前卡要 embedding 的 category id，初始化权重</span></span>
<span class="line"><span>        self.vocab_start_index, self.vocab_end_index = VocabUtility.vocab_range_from_global_vocab_size(</span></span>
<span class="line"><span>            self.num_embeddings, get_tensor_model_parallel_rank(),</span></span>
<span class="line"><span>            self.tensor_model_parallel_size)</span></span>
<span class="line"><span>        self.num_embeddings_per_partition = self.vocab_end_index - self.vocab_start_index</span></span>
<span class="line"><span>        self.weight = Parameter(torch.empty(</span></span>
<span class="line"><span>            self.num_embeddings_per_partition, self.embedding_dim,</span></span>
<span class="line"><span>            dtype=args.params_dtype))</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def forward(self, input_):</span></span>
<span class="line"><span>        if self.tensor_model_parallel_size &gt; 1:</span></span>
<span class="line"><span>            # 把当前卡上不要的 category idx mask 掉</span></span>
<span class="line"><span>            input_mask = (input_ &lt; self.vocab_start_index) | \</span></span>
<span class="line"><span>                         (input_ &gt;= self.vocab_end_index)</span></span>
<span class="line"><span>            # Mask 掉的输入</span></span>
<span class="line"><span>            masked_input = input_.clone() - self.vocab_start_index</span></span>
<span class="line"><span>            masked_input[input_mask] = 0</span></span>
<span class="line"><span>        else:</span></span>
<span class="line"><span>            masked_input = input_</span></span>
<span class="line"><span>        # 获取嵌入向量</span></span>
<span class="line"><span>        output_parallel = F.embedding(masked_input, self.weight,</span></span>
<span class="line"><span>                                      self.padding_idx, self.max_norm,</span></span>
<span class="line"><span>                                      self.norm_type, self.scale_grad_by_freq,</span></span>
<span class="line"><span>                                      self.sparse)</span></span>
<span class="line"><span>        # 把 mask 掉的 category idx 对应的嵌入向量处理成 0</span></span>
<span class="line"><span>        if self.tensor_model_parallel_size &gt; 1:</span></span>
<span class="line"><span>            output_parallel[input_mask, :] = 0.0</span></span>
<span class="line"><span>        # 在所有模型并行 GPU 上进行 reduce 操作</span></span>
<span class="line"><span>        output = reduce_from_tensor_model_parallel_region(output_parallel)</span></span>
<span class="line"><span>        return output</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>3D并行</h2>
<blockquote>
<p>Efficient Large-Scale Language Model Training on GPU Clusters Using Megatron-LM</p>
</blockquote>
<p><code>https://arxiv.org/pdf/2104.04473</code> <code>https://github.com/NVIDIA/Megatron-LM</code></p>
<h3>贡献</h3>
<p>如何合理的使用上面的多种并行技术一直是一个困难的命题，本文中研究人员提出了一种名为PTD-P的策略，在一个大规模的GPU集群上达到超过50%的效能。</p>
<p>本文探讨了以下几种因素对效率的影响：</p>
<ul>
<li>不同的并行策略：通常张量并行只适用于一个multi-GPU服务器内部，而流水线并行则几乎只用于更大的模型（多机集群）</li>
<li>流水线并行中的schedule：对通信、pipeline bubble的大小、内存都有重要的影响</li>
<li>参数的选取（如microbatch的大小）：对于内存使用和kernel计算效率、pipeline bubble大小也有影响</li>
</ul>
<h3>数据并行</h3>
<p>问题：</p>
<ul>
<li>batch过小，会导致单块GPU利用率降低，而通信成本大大增长</li>
<li>理论上GPU数量等于batch size，这也限制了可以使用的卡的规模</li>
</ul>
<h3>考虑流水线并行</h3>
<p>流水线并行技术将一个模型（Transformer）中的不同层发放到多块GPU上，将原本一个batch的数据分解为多个更小的micro batch，通过编排forward pass和backward pass可以来获取不同的性能。<br>
为了确保optimizer semantics（也就是端到端的计算能够正确的完成），不同GPU之间需要进行定期同步</p>
]]></content>
    <category term="SOSD"/>
    <published>2024-10-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">CS149 Lab Assignment1</title>
    <id>https://newzone.top/posts/CS149_asst1.html</id>
    <link href="https://newzone.top/posts/CS149_asst1.html"/>
    <updated>2024-09-18T15:50:38.000Z</updated>
    <summary type="html"><![CDATA[<h2>Prog1_mandelbort_threads</h2>
<h3>环境配置</h3>
<p>本人使用OS为<code>Ubuntu 22.04</code>, 还是建议使用Linux系统做Lab, 很多环境配置会方便一些.</p>
<p>CS149_Asst1并不需要额外配置运行环境, 下载解压一下编译环境就好啦!<br>
下载包:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    wget https://github.com/ispc/ispc/releases/download/v1.21.0/ispc-v1.21.0-linux.tar.gz</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h2>Prog1_mandelbort_threads</h2>
<h3>环境配置</h3>
<p>本人使用OS为<code>Ubuntu 22.04</code>, 还是建议使用Linux系统做Lab, 很多环境配置会方便一些.</p>
<p>CS149_Asst1并不需要额外配置运行环境, 下载解压一下编译环境就好啦!<br>
下载包:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    wget https://github.com/ispc/ispc/releases/download/v1.21.0/ispc-v1.21.0-linux.tar.gz</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>解压包:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    tar -xvf ispc-v1.21.0-linux.tar.gz</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>配置环境路径:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    export PATH=$PATH:${HOME}/Downloads/ispc-v1.21.0-linux/bin</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>环境配置完成后就可以clone repo到本地来开始lab了:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    git clone https://github.com/stanford-cs149/asst1.git</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>任务分析</h3>
<blockquote>
<p>Pro1的内容主要是为了让学生了解<code>std::thread</code>的并行机制和"多线程不一定高效率"的并发事实, 所以难度并不算大~~(这是我的事后诸葛亮)~~, 整体框架已经在源码中基本完成了.完成后可以通过<code>make</code> + <code>./mandelbort --&lt;args&gt;</code>检验正确与否.</p>
</blockquote>
<p>task :</p>
<ul>
<li>创建<code>线程0</code>和<code>线程1</code>, 分别计算图像的上下两个部分, 即<code>将图像的不同空间交给不同线程</code>计算, 这被称为<code>空间分解(spatial decomposition)</code>.</li>
<li>扩展代码使其能够使用<code>2, 3, 4, 5, 6, 7, 8</code>个线程, 进行空间分解, 生成加速图, 假设加速是否与线程数线性相关并加以验证.</li>
<li>在<code>workerThreadStart()</code>的开头和结尾插入计时代码, 验证并解释task2中提出的猜想.</li>
<li>修改一开始的线程分配方式, 实现将两个图片都拉到<code>8线程时7-8倍加速比</code>的效果, 找到适应任何线程数的泛型分配方式(不需要线程之间进行响应和同步), 报告最后得出的8线程加速比.</li>
<li>使用<code>16个线程</code>运行改进后代码, 回答性能是否明显高于8线程并解释原因.</li>
</ul>
<p>事实上task中给的提示还是比较明显的, 在<code>task1</code>中解释了空间分解的概念, 那么通过对图片本身的<code>上下多份分割</code>,就可以解决这个问题,要注意分割的时候会不会漏行.</p>
<h3>任务实现</h3>
<p>我们将一开始就对任务给出多线程的解决方式, 并在后续针对数据结果决定是否要进行优化.</p>
<p>首先我们可以根据阅读<code>mandelbrotSerial.cpp</code>中的源码, 得到mandelbrotSerial()函数事实上是用来计算<code>Mandelbrot</code>图像的, 可以简单分析一下<code>mandelbrotSerial()</code>函数的各个参数:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    void mandelbrotSerial(</span></span>
<span class="line"><span>    float x0, float y0, float x1, float y1, // 复平面左上和右下两个点坐标</span></span>
<span class="line"><span>    int width, int height,                  // 图像宽度和高度</span></span>
<span class="line"><span>    int startRow, int numRows,              // 开始行和总计算行数</span></span>
<span class="line"><span>    int maxIterations,                      // 最大迭代次数</span></span>
<span class="line"><span>    int output[]);                          // 每个点的迭代次数</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难发现只要我们给出<code>startRow</code>, <code>numRows</code>, 其余保持图像默认参数, 就可以完成计算了.<br>
所以可以给出函数<code>workerThreadStart(WorkerArgs * const args)</code>的代码:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>    size_t rows = args -&gt; height / args -&gt; numThreads;          // 确定要计算的行数</span></span>
<span class="line"><span>    if (args -&gt; height % args -&gt; numThreads) {                  // 如果该遇到整除要加一行避免遗漏</span></span>
<span class="line"><span>        rows++;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    size_t startRow = args -&gt; threadId * rows;                  // 确定开始行</span></span>
<span class="line"><span>    // 如果已经到最后部分不够切分, 直接处理最后部分</span></span>
<span class="line"><span>    rows = rows &gt; args -&gt; height - startRow ? args -&gt; height - startRow : rows;</span></span>
<span class="line"><span>    // 调用mandelbrotSerial</span></span>
<span class="line"><span>    mandelbrotSerial(args -&gt; x0, args -&gt; y0, args -&gt; x1, args -&gt; y1, args -&gt; width, </span></span>
<span class="line"><span>                    args -&gt; height, startRow, rows, args -&gt; maxIterations, args -&gt; output);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="CS149_Lab"/>
    <published>2024-09-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">CS149 Lab Assignment1</title>
    <id>https://newzone.top/posts/CS336_ass1.html</id>
    <link href="https://newzone.top/posts/CS336_ass1.html"/>
    <updated>2025-06-30T10:25:06.000Z</updated>
    <summary type="html"><![CDATA[<h2>Prog1_mandelbort_threads</h2>
<h3>环境配置</h3>
]]></summary>
    <content type="html"><![CDATA[<h2>Prog1_mandelbort_threads</h2>
<h3>环境配置</h3>
]]></content>
    <category term="CS149_Lab"/>
    <published>2024-09-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">CS61A</title>
    <id>https://newzone.top/posts/CS61A.html</id>
    <link href="https://newzone.top/posts/CS61A.html"/>
    <updated>2025-01-01T10:28:19.000Z</updated>
    <summary type="html"><![CDATA[<h2>week1</h2>
<h3>Lecture</h3>
<h4>Welcome</h4>
<p>The first lecture just a simple explaination of CS61A and explnation of the <code>Expression Tree</code> which is composed of a operator and several operands, so I just paste the picture of the Tree.<br>
</p>
<blockquote>
<p>Easy but interesting.<br>
If you learned data structure, you may think this is <code>n-ary tree</code>.</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[<h2>week1</h2>
<h3>Lecture</h3>
<h4>Welcome</h4>
<p>The first lecture just a simple explaination of CS61A and explnation of the <code>Expression Tree</code> which is composed of a operator and several operands, so I just paste the picture of the Tree.<br>
</p>
<blockquote>
<p>Easy but interesting.<br>
If you learned data structure, you may think this is <code>n-ary tree</code>.</p>
</blockquote>
<h4>Functions</h4>
<h5>name</h5>
<h6>built-in</h6>
<p>Like c/c++, python also has its own way to name or rename a parameter, a function or a variable and so on. The lecture will introduce it at beginning.</p>
<p><code>Ctrl + L</code> is used to flash the terminal in python session.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Traceback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (most </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">recent</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> call</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> last</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">  File</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "&lt;stdin&gt;",</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> line</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 1,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">modul</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">NameError:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> 'pi'</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> defined</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>oops! No pi! This means the parameter is not a built-in parameter. We have to <code>import</code> it.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> math</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> pi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">3.141592653589793</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The same goes for imported functions.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> math</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">sin(pi</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">1.2246467991473532e-16</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">sin(pi/2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">1.0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>You may find it not zero after sin(pi), because of the type of data storage in the computer or just a data cut. Not important.</p>
</blockquote>
<h6>name by ourselves</h6>
<p>We can also name our own parameter:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">radius</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">radius</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">10</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even multiple variables named simultaneously is also supported:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">area,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> circ</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> pi</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> radius</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">radius,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> pi</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> radius</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">area</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">314.1592653589793</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">circ</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">62.83185307179586</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The same goes for imported functions.</p>
<h6>define</h6>
<p>We can edit our functions by <code>def</code>:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">def</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> square</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">...</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">     return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> mul</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">x,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">square(11</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">121</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we change the value of parameter, the value of expression named by us will not change, but if define a functions will solve the issue:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">def</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> area</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">...</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">     return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> pi</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> radius</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> radius</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">area</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">314.1592653589793</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">radius</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">area</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">1256.6370614359173</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>A function differs from a name in that its return expression here gets re-evaluated every time it's called.</p>
</blockquote>
<h4>defining functions</h4>
<p>structure of defining:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">def</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">e</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">formal parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> expressio</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>Fuctions will be evaluated when it is called.</p>
</blockquote>
<p>The lecture also introduce the difference between local frames and global frames. I passed it for my c&amp;c++ basics.</p>
<h4>Environment Diagrams</h4>
<p></p>
<p>Online Python Tutor:</p>
<blockquote>
<p>https://pythontutor.com/visualize.html#</p>
</blockquote>
<h4>Print and None</h4>
<p>Just talk about the difference of print and evaluate and <code>Nonetype</code>.</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">None</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;&gt;&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">None</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">None</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3>Lab</h3>
<h4>Lab0:Getting Started</h4>
<blockquote>
<p>Download starter files from: <code>https://cs61a.org/lab/lab00/lab00.zip</code></p>
</blockquote>
<h5>Introduction</h5>
<p>This lab explains how to setup your computer to complete assignments and introduces some of the basics of Python.</p>
<p>Components cheek passed, so skip them.</p>
<h5>Setup</h5>
<p>skip.</p>
<h5>First Assignment</h5>
<h6>What Would Python Do?</h6>
<p>Enter the following in your terminal to begin this section:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"># we don't have edu email of berkeley, so we need to add --local</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">python</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> ok</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> --local</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>Esay to pass:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">=====================================================================</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Assignment:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> Lab</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">OK,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> v1.18.1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">=====================================================================</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF">~</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Unlocking</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> tests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">At</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> each</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "? ",</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> what</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> would</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> expect</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> output</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> be.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">Type</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">to</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> quit</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="CS61A"/>
    <published>2025-01-01T10:28:19.000Z</published>
  </entry>
  <entry>
    <title type="text">CSE234</title>
    <id>https://newzone.top/posts/CSE234_PA.html</id>
    <link href="https://newzone.top/posts/CSE234_PA.html"/>
    <updated>2025-06-23T04:22:38.000Z</updated>
    <summary type="html"><![CDATA[<h2>PA1: Automatic differentiation</h2>
<h3>Question 1: Auto Diff Library</h3>
<h4>Part 1: Operators</h4>
<p>The list of operators that you will need to implement are:</p>
<ul>
<li><code>DivOp</code></li>
<li><code>DivByConstOp</code></li>
<li><code>TransposeOp</code></li>
<li><code>ReLUOp</code></li>
<li><code>SqrtOp</code></li>
<li><code>PowerOp</code></li>
<li><code>MeanOp</code></li>
<li><code>MatMulOp</code></li>
<li><code>SoftmaxOp</code></li>
<li><code>LayerNormOp</code></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>PA1: Automatic differentiation</h2>
<h3>Question 1: Auto Diff Library</h3>
<h4>Part 1: Operators</h4>
<p>The list of operators that you will need to implement are:</p>
<ul>
<li><code>DivOp</code></li>
<li><code>DivByConstOp</code></li>
<li><code>TransposeOp</code></li>
<li><code>ReLUOp</code></li>
<li><code>SqrtOp</code></li>
<li><code>PowerOp</code></li>
<li><code>MeanOp</code></li>
<li><code>MatMulOp</code></li>
<li><code>SoftmaxOp</code></li>
<li><code>LayerNormOp</code></li>
</ul>
<h5>DivOp</h5>
<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> DivOp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B">Op</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">    """Op to element-wise divide two nodes."""</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> __call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">node_A</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: Node, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">node_B</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: Node) -&gt; Node:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">            inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">[node_A, node_B],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">            op</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">            name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">node_A.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">node_B.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">)"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: Node, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">input_values</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: List[torch.Tensor]) -&gt; torch.Tensor:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        """Return the element-wise division of input values."""</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(input_values) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        """</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">TODO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">: your code here"""</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: Node, </span><span style="--shiki-light:#24292E;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">output_grad</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">: Node) -&gt; List[Node]:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        """Given gradient of division node, return partial adjoint to each input."""</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">        """</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">TODO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">: your code here"""</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="CSE234"/>
    <category term="Lab"/>
    <published>2025-02-27T00:00:00.000Z</published>
  </entry>
</feed>